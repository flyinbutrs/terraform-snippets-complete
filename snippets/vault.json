{
    "vault-approle-auth-backend-login": {
        "body": "resource \"resource\" \"$1\" {\n    # role_id - (Required) The ID of the role to log in with.\n    role_id = \"\"\n\n    # secret_id - (Optional) The secret ID of the role to log in with. Required unless `bind_secret_id` is set to false on the role.\n    secret_id = \"\"\n\n    # backend - (Optional) The unique path of the Vault backend to log in with.\n    backend = \"\"\n\n    # Exported Attributes\n    # \"policies\" - A list of policies applied to the token.\n    # \"renewable\" - Whether the token is renewable or not.\n    # \"lease_duration\" - How long the token is valid for, in seconds.\n    # \"lease_started\" - The date and time the lease started, in RFC 3339 format.\n    # \"accessor\" - The accessor for the token.\n    # \"client_token\" - The Vault token created.\n    # \"metadata\" - The metadata associated with the token.\n}",
        "description": "Logs into Vault using the AppRole auth backend. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/approle.html) for more\ninformation.",
        "prefix": "vault-approle-auth-backend-login"
    },
    "vault-approle-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # role_name - (Required) The name of the role.\n    role_name = \"\"\n\n    # role_id - (Optional) The RoleID of this role. If not specified, one will be auto-generated.\n    role_id = \"\"\n\n    # bind_secret_id - (Optional) Whether or not to require `secret_id` to be presented when logging in using this AppRole. Defaults to `true`.\n    bind_secret_id = \"\"\n\n    # bound_cidr_list - (Optional) If set, specifies blocks of IP addresses which can perform the login operation.\n    bound_cidr_list = \"\"\n\n    # policies - (Optional) An array of strings specifying the policies to be set on tokens issued using this role.\n    policies = \"\"\n\n    # secret_id_num_uses - (Optional) The number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.\n    secret_id_num_uses = \"\"\n\n    # secret_id_ttl - (Optional) The number of seconds after which any SecretID expires.\n    secret_id_ttl = \"\"\n\n    # token_num_uses - (Optional) The number of times issued tokens can be used. A value of 0 means unlimited uses.\n    token_num_uses = \"\"\n\n    # token_ttl - (Optional) The TTL period of tokens issued using this role, provided as a number of seconds.\n    token_ttl = \"\"\n\n    # token_max_ttl - (Optional) The maximum allowed lifetime of tokens issued using this role, provided as a number of seconds.\n    token_max_ttl = \"\"\n\n    # period - (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of seconds.\n    period = \"\"\n\n    # backend - (Optional) The unique name of the auth backend to configure. Defaults to `approle`.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an AppRole auth backend role in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/approle.html) for more\ninformation.",
        "prefix": "vault-approle-auth-backend-role"
    },
    "vault-approle-auth-backend-role-secret-id": {
        "body": "resource \"resource\" \"$1\" {\n    # role_name - (Required) The name of the role to create the SecretID for.\n    role_name = \"\"\n\n    # metadata - (Optional) A JSON-encoded string containing metadata in key-value pairs to be set on tokens issued with this SecretID.\n    metadata = \"\"\n\n    # cidr_list - (Optional) If set, specifies blocks of IP addresses which can perform the login operation using this SecretID.\n    cidr_list = \"\"\n\n    # secret_id - (Optional) The SecretID to be created. If set, uses \"Push\" mode.  Defaults to Vault auto-generating SecretIDs.\n    secret_id = \"\"\n\n    # Exported Attributes\n    # \"accessor\" - The unique ID for this SecretID that can be safely logged.\n    # \"secret_id\" - (Optional) The SecretID to be created. If set, uses \"Push\" mode.  Defaults to Vault auto-generating SecretIDs.\n}",
        "description": "Manages an AppRole auth backend SecretID in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/approle.html) for more\ninformation.",
        "prefix": "vault-approle-auth-backend-role-secret-id"
    },
    "vault-audit": {
        "body": "resource \"resource\" \"$1\" {\n    # options - (Required) Configuration options to pass to the audit device itself.\n    options = \"\"\n\n    # type - (Required) Type of the audit device, such as 'file'.\n    type = \"\"\n\n    # path - (Optional) (optional) The path to mount the audit device. This defaults to the type.\n    path = \"\"\n\n    # description - (Optional) Human-friendly description of the audit device.\n    description = \"\"\n\n    # Exported Attributes\n}",
        "description": "",
        "prefix": "vault-audit"
    },
    "vault-datasource-approle-auth-backend-role-id": {
        "body": "data \"source\" \"$1\" {\n    # role_name - (Required) The name of the role to retrieve the Role ID for.\n    role_name = \"\"\n\n    # backend - (Optional) The unique name for the AppRole backend the role to retrieve a RoleID for resides in. Defaults to \"approle\".\n    backend = \"\"\n\n    # Exported Attributes\n    # \"role_id\" - The RoleID of the role.\n    # \"backend\" - (Optional) The unique name for the AppRole backend the role to retrieve a RoleID for resides in. Defaults to \"approle\".\n}",
        "description": "Reads the Role ID of an AppRole from a Vault server.",
        "prefix": "vault-datasource-approle-auth-backend-role-id"
    },
    "vault-datasource-aws-access-credentials": {
        "body": "data \"source\" \"$1\" {\n    # role - (Required) The name of the AWS secret backend role to read credentials from, with no leading or trailing `/`s.\n    role = \"\"\n\n    # backend - (Required) The path to the AWS secret backend to read credentials from, with no leading or trailing `/`s.\n    backend = \"\"\n\n    # type - (Optional) The type of credentials to read. Defaults to `\"creds\"`, which just returns an AWS Access Key ID and Secret Key. Can also be set to `\"sts\"`, which will return a security token in addition to the keys.\n    type = \"\"\n\n    # Exported Attributes\n    # \"access_key\" - The AWS Access Key ID returned by Vault.\n    # \"secret_key\" - The AWS Secret Key returned by Vault.\n    # \"security_token\" - The STS token returned by Vault, if any.\n    # \"lease_id\" - The lease identifier assigned by Vault.\n    # \"lease_duration\" - The duration of the secret lease, in seconds relative to the time the data was requested. Once this time has passed any plan generated with this data may fail to apply.\n    # \"lease_start_time\" - As a convenience, this records the current time on the computer where Terraform is running when the data is requested. This can be used to approximate the absolute time represented by \"lease_duration\", though users must allow for any clock drift and response latency relative to the Vault server.\n    # \"lease_renewable\" - \"true\" if the lease can be renewed using Vault's \"sys/renew/{lease-id}\" endpoint. Terraform does not currently support lease renewal, and so it will request a new lease each time this data source is refreshed.\n}",
        "description": "Reads AWS credentials from an AWS secret backend in Vault. ~> **Important** All data retrieved from Vault will be\nwritten in cleartext to state file generated by Terraform, will appear in\nthe console output when Terraform runs, and may be included in plan files\nif secrets are interpolated into any resource attributes.\nProtect these artifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-datasource-aws-access-credentials"
    },
    "vault-datasource-generic-secret": {
        "body": "data \"source\" \"$1\" {\n    # path - (Required) The full logical path from which to request data.\n    path = \"\"\n\n    # Exported Attributes\n    # \"data_json\" - A string containing the full data payload retrieved from Vault, serialized in JSON format.\n    # \"data\" - A mapping whose keys are the top-level data keys returned from Vault and whose values are the corresponding values. This map can only represent string data, so any non-string values returned from Vault are serialized as JSON.\n    # \"lease_id\" - The lease identifier assigned by Vault, if any.\n    # \"lease_duration\" - The duration of the secret lease, in seconds relative to the time the data was requested. Once this time has passed any plan generated with this data may fail to apply.\n    # \"lease_start_time\" - As a convenience, this records the current time on the computer where Terraform is running when the data is requested. This can be used to approximate the absolute time represented by \"lease_duration\", though users must allow for any clock drift and response latency relative to to the Vault server.\n    # \"lease_renewable\" - \"true\" if the lease can be renewed using Vault's \"sys/renew/{lease-id}\" endpoint. Terraform does not currently support lease renewal, and so it will request a new lease each time this data source is refreshed.\n}",
        "description": "Reads arbitrary data from a given path in Vault. This resource is primarily intended to be used with\n[Vault's \"generic\" secret backend](https://www.vaultproject.io/docs/secrets/generic/index.html),\nbut it is also compatible with any other Vault endpoint that supports\nthe `vault read` command. ~> **Important** All data retrieved from Vault will be\nwritten in cleartext to state file generated by Terraform, will appear in\nthe console output when Terraform runs, and may be included in plan files\nif secrets are interpolated into any resource attributes.\nProtect these artifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-datasource-generic-secret"
    },
    "vault-datasource-kubernetes-auth-backend-config": {
        "body": "data \"source\" \"$1\" {\n    # backend - (Optional) The unique name for the Kubernetes backend the config to\n    backend = \"\"\n\n    # Exported Attributes\n    # \"kubernetes_host\" - Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.\n    # \"kubernetes_ca_cert\" - PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.\n    # \"pem_keys\" - Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.\n}",
        "description": "Reads the Role of an Kubernetes from a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/api/auth/kubernetes/index.html#read-config) for more\ninformation.",
        "prefix": "vault-datasource-kubernetes-auth-backend-config"
    },
    "vault-datasource-kubernetes-auth-backend-role": {
        "body": "data \"source\" \"$1\" {\n    # role_name - (Required) The name of the role to retrieve the Role attributes for.\n    role_name = \"\"\n\n    # backend - (Optional) The unique name for the Kubernetes backend the role to retrieve Role attributes for resides in. Defaults to \"kubernetes\".\n    backend = \"\"\n\n    # Exported Attributes\n    # \"bound_service_account_names\" - List of service account names able to access this role. If set to \"*\" all names are allowed, both this and bound_service_account_namespaces can not be \"*\".\n    # \"bound_service_account_namespaces\" - List of namespaces allowed to access this role. If set to \"*\" all namespaces are allowed, both this and bound_service_account_names can not be set to \"*\".\n    # \"ttl\" - The TTL period of tokens issued using this role in seconds.\n    # \"max_ttl\" - The maximum allowed lifetime of tokens issued in seconds using this role.\n    # \"num_uses\" - Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.\n    # \"period\" - If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter.\n    # \"policies\" - Policies to be set on tokens issued using this role.\n}",
        "description": "Reads the Role of an Kubernetes from a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/api/auth/kubernetes/index.html#read-role) for more\ninformation.",
        "prefix": "vault-datasource-kubernetes-auth-backend-role"
    },
    "vault-github-auth-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # organization - (Required) The organization configured users must be part of.\n    organization = \"\"\n\n    # path - (Optional) Path where the auth backend is mounted. Defaults to `auth/github`  if not specified.\n    path = \"\"\n\n    # base_url - (Optional) The API endpoint to use. Useful if you  are running GitHub Enterprise or an API-compatible authentication server.\n    base_url = \"\"\n\n    # description - (Optional) Specifies the description of the mount.  This overrides the current stored value, if any.\n    description = \"\"\n\n    # ttl - (Optional) Duration after which authentication will be expired.  This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)\n    ttl = \"\"\n\n    # max_ttl - (Optional) Maximum duration after which authentication will be expired. This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)\n    max_ttl = \"\"\n\n    # default_lease_ttl - (Optional) Specifies the default time-to-live.  If set, this overrides the global default.  Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)\n    default_lease_ttl = \"\"\n\n    # max_lease_ttl - (Optional) Specifies the maximum time-to-live.  If set, this overrides the global default. Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)\n    max_lease_ttl = \"\"\n\n    # audit_non_hmac_response_keys - (Optional) Specifies the list of keys that will  not be HMAC'd by audit devices in the response data object.\n    audit_non_hmac_response_keys = \"\"\n\n    # audit_non_hmac_request_keys - (Optional) Specifies the list of keys that will  not be HMAC'd by audit devices in the request data object.\n    audit_non_hmac_request_keys = \"\"\n\n    # listing_visibility - (Optional) Specifies whether to show this mount in  the UI-specific listing endpoint. Valid values are \"unauth\" or \"hidden\".\n    listing_visibility = \"\"\n\n    # passthrough_request_headers - (Optional) List of headers to whitelist and  pass from the request to the backend.\n    passthrough_request_headers = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages a Github Auth mount in a Vault server. See the [Vault \ndocumentation](https://www.vaultproject.io/docs/auth/github.html) for more\ninformation.",
        "prefix": "vault-github-auth-backend"
    },
    "vault-github-team": {
        "body": "resource \"resource\" \"$1\" {\n    # team - (Required) GitHub team name in \"slugified\" format, for example: Terraform Developers -> `terraform-developers`\n    team = \"\"\n\n    # backend - (Required) Path where the github auth backend is mounted. Defaults to `github`  if not specified.\n    backend = \"\"\n\n    # policies - (Optional) A list of policies to be assigned to this team.\n    policies = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages policy mappings for Github Teams authenticated via Github. See the [Vault \ndocumentation](https://www.vaultproject.io/docs/auth/github.html) for more\ninformation.",
        "prefix": "vault-github-team"
    },
    "vault-github-user": {
        "body": "resource \"resource\" \"$1\" {\n    # user - (Required) GitHub user name.\n    user = \"\"\n\n    # backend - (Required) Path where the github auth backend is mounted. Defaults to `github`  if not specified.\n    backend = \"\"\n\n    # policies - (Optional) A list of policies to be assigned to this user.\n    policies = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages policy mappings for Github Users authenticated via Github. See the [Vault \ndocumentation](https://www.vaultproject.io/docs/auth/github.html) for more\ninformation.",
        "prefix": "vault-github-user"
    },
    "vault-jwt-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # user_claim - (Required) The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due to a successful login.\n    user_claim = \"\"\n\n    # bound_audiences - (Required) List of `aud` claims to match against. Any match is sufficient.\n    bound_audiences = \"\"\n\n    # role_name - (Required) The name of the role.\n    role_name = \"\"\n\n    # policies - (Optional) Policies to be set on tokens issued using this role.\n    policies = \"\"\n\n    # ttl - (Optional) The initial/renewal TTL of tokens issued using this role, in seconds.\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum allowed lifetime of tokens issued using this role, in seconds.\n    max_ttl = \"\"\n\n    # period - (Optional) If set, indicates that the token generated using this role should never expire, but instead always use the value set here as the TTL for every renewal. \n    period = \"\"\n\n    # num_uses - (Optional) If set, puts a use-count limitation on the issued token.\n    num_uses = \"\"\n\n    # bound_subject - (Optional) If set, requires that the `sub` claim matches this value.\n    bound_subject = \"\"\n\n    # bound_cidrs - (Optional) If set, a list of CIDRs valid as the source  address for login requests. This value is also encoded into any resulting token.\n    bound_cidrs = \"\"\n\n    # groups_claim - (Optional) The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for the Identity group aliases created due to a successful login. The claim value must be a list of strings.\n    groups_claim = \"\"\n\n    # backend - (Optional) The unique name of the auth backend to configure. Defaults to `jwt`.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an JWT auth backend role in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/jwt.html) for more\ninformation.",
        "prefix": "vault-jwt-auth-backend-role"
    },
    "vault-kubernetes-auth-backend-config": {
        "body": "resource \"resource\" \"$1\" {\n    # kubernetes_host - (Required) Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.\n    kubernetes_host = \"\"\n\n    # kubernetes_ca_cert - (Optional) PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.\n    kubernetes_ca_cert = \"\"\n\n    # token_reviewer_jwt - (Optional) A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.\n    token_reviewer_jwt = \"\"\n\n    # pem_keys - (Optional) List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys. \n    pem_keys = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an Kubernetes auth backend config in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/kubernetes.html) for more\ninformation.",
        "prefix": "vault-kubernetes-auth-backend-config"
    },
    "vault-kubernetes-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # role_name - (Required) Name of the role.\n    role_name = \"\"\n\n    # bound_service_account_names - (Optional) List of service account names able to access this role. If set to \"*\" all names are allowed, both this and bound_service_account_namespaces can not be \"*\".\n    bound_service_account_names = \"\"\n\n    # bound_service_account_namespaces - (Optional) List of namespaces allowed to access this role. If set to \"*\" all namespaces are allowed, both this and bound_service_account_names can not be set to \"*\".\n    bound_service_account_namespaces = \"\"\n\n    # ttl - (Optional) The TTL period of tokens issued using this role in seconds.\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum allowed lifetime of tokens issued in seconds using this role.\n    max_ttl = \"\"\n\n    # period - (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter.\n    period = \"\"\n\n    # policies - (Optional) Policies to be set on tokens issued using this role.\n    policies = \"\"\n\n    # backend - (Optional) Unique name of the kubernetes backend to configure.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an Kubernetes auth backend role in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/kubernetes.html) for more\ninformation.",
        "prefix": "vault-kubernetes-auth-backend-role"
    },
    "vault-resource-auth-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # type - (Required) The name of the auth method type\n    type = \"\"\n\n    # path - (Optional) The path to mount the auth method \u2014 this defaults to the name of the type\n    path = \"\"\n\n    # description - (Optional) A description of the auth method\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default lease duration in seconds.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum lease duration in seconds.\n    max_lease_ttl_seconds = \"\"\n\n    # listing_visibility - (Optional) Speficies whether to show this mount in the UI-specific listing endpoint.\n    listing_visibility = \"\"\n\n    # local - (Optional) Specifies if the auth method is local only.\n    local = \"\"\n\n    # Exported Attributes\n    # \"accessor\" - The accessor for this auth method\n    # \"local\" - (Optional) Specifies if the auth method is local only.\n}",
        "description": "",
        "prefix": "vault-resource-auth-backend"
    },
    "vault-resource-aws-auth-backend-cert": {
        "body": "resource \"resource\" \"$1\" {\n    # aws_public_cert - (Required) The  Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata. You can find this key in the [AWS documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).\n    aws_public_cert = \"\"\n\n    # cert_name - (Required) The name of the certificate.\n    cert_name = \"\"\n\n    # type - (Optional) Either \"pkcs7\" or \"identity\", indicating the type of document which can be verified using the given certificate. Defaults to \"pkcs7\".\n    type = \"\"\n\n    # backend - (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to `aws`.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages a certificate to be used with an AWS Auth Backend in Vault. This resource sets the AWS public key and the type of document that can be\nverified against the key that Vault can then use to verify the instance\nidentity documents making auth requests. For more information, see the [Vault\ndocs](https://www.vaultproject.io/api/auth/aws/index.html#configure-client). ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and will\nappear in the console output when Terraform runs. Protect these artifacts\naccordingly. See [the main provider documentation](../index.html) for more\ndetails.",
        "prefix": "vault-resource-aws-auth-backend-cert"
    },
    "vault-resource-aws-auth-backend-client": {
        "body": "resource \"resource\" \"$1\" {\n    # backend - (Optional) The path the AWS auth backend being configured was \tmounted at.  Defaults to `aws`.\n    backend = \"\"\n\n    # access_key - (Optional) The AWS access key that Vault should use for the \tauth backend.\n    access_key = \"\"\n\n    # secret_key - (Optional) The AWS secret key that Vault should use for the \tauth backend.\n    secret_key = \"\"\n\n    # iam_endpoint - (Optional) Override the URL Vault uses when making IAM API \tcalls.\n    iam_endpoint = \"\"\n\n    # sts_endpoint - (Optional) Override the URL Vault uses when making STS API \tcalls.\n    sts_endpoint = \"\"\n\n    # iam_server_id_header_value - (Optional) The value to require in the \t`X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests \tthat are used in the IAM auth method.\n    iam_server_id_header_value = \"\"\n\n    # Exported Attributes\n}",
        "description": "Configures the client used by an AWS Auth Backend in Vault. This resource sets the access key and secret key that Vault will use\nwhen making API requests on behalf of an AWS Auth Backend. It can also\nbe used to override the URLs Vault uses when making those API requests. For more information, see the\n[Vault docs](https://www.vaultproject.io/api/auth/aws/index.html#configure-client). ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-aws-auth-backend-client"
    },
    "vault-resource-aws-auth-backend-identity-whitelist": {
        "body": "resource \"resource\" \"$1\" {\n    # backend - (Optional) The path of the AWS backend being configured.\n    backend = \"\"\n\n    # safety_buffer - (Optional) The amount of extra time, in minutes, that must have passed beyond the roletag expiration, before it is removed from the backend storage.\n    safety_buffer = \"\"\n\n    # disable_periodic_tidy - (Optional) If set to true, disables the periodic tidying of the identity-whitelist entries.\n    disable_periodic_tidy = \"\"\n\n    # Exported Attributes\n}",
        "description": "Configures the periodic tidying operation of the whitelisted identity entries. For more information, see the\n[Vault docs](https://www.vaultproject.io/api/auth/aws/index.html#configure-identity-whitelist-tidy-operation).",
        "prefix": "vault-resource-aws-auth-backend-identity-whitelist"
    },
    "vault-resource-aws-auth-backend-login": {
        "body": "resource \"resource\" \"$1\" {\n    # backend - (Optional) The unique name of the AWS auth backend. Defaults to 'aws'.\n    backend = \"\"\n\n    # role - (Optional) The name of the AWS auth backend role to create tokens against.\n    role = \"\"\n\n    # identity - (Optional) The base64-encoded EC2 instance identity document to authenticate with. Can be retrieved from the EC2 metadata server.\n    identity = \"\"\n\n    # signature - (Optional) The base64-encoded SHA256 RSA signature of the instance identity document to authenticate with, with all newline characters removed. Can be retrieved from the EC2 metadata server.\n    signature = \"\"\n\n    # nonce - (Optional) The unique nonce to be used for login requests. Can be set to a user-specified value, or will contain the server-generated value once a token is issued. EC2 instances can only acquire a single token until the whitelist is tidied again unless they keep track of this nonce.\n    nonce = \"\"\n\n    # iam_http_request_method - (Optional) The HTTP method used in the signed IAM request.\n    iam_http_request_method = \"\"\n\n    # iam_request_url - (Optional) The base64-encoded HTTP URL used in the signed request.\n    iam_request_url = \"\"\n\n    # iam_request_body - (Optional) The base64-encoded body of the signed request.\n    iam_request_body = \"\"\n\n    # iam_request_headers - (Optional) The base64-encoded, JSON serialized representation of the GetCallerIdentity HTTP request headers.\n    iam_request_headers = \"\"\n\n    # Exported Attributes\n    # \"lease_duration\" - The duration in seconds the token will be valid, relative to the time in \"lease_start_time\".\n    # \"lease_start_time\" - The approximate time at which the token was created, using the clock of the system where Terraform was running.\n    # \"renewable\" - Set to true if the token can be extended through renewal.\n    # \"metadata\" - A map of information returned by the Vault server about the authentication used to generate this token.\n    # \"auth_type\" - The authentication type used to generate this token.\n    # \"policies\" - The Vault policies assigned to this token.\n    # \"accessor\" - The token's accessor.\n    # \"client_token\" - The token returned by Vault.\n}",
        "description": "Logs into a Vault server using an AWS auth backend. Login can be\naccomplished using a signed identity request from IAM or using ec2\ninstance metadata. For more information, see the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/aws.html).",
        "prefix": "vault-resource-aws-auth-backend-login"
    },
    "vault-resource-aws-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # role - (Required) The name of the role.\n    role = \"\"\n\n    # auth_type - (Optional) The auth type permitted for this role. Valid choices are `ec2` and `iam`. Defaults to `iam`.\n    auth_type = \"\"\n\n    # bound_ami_ids - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_ami_ids = \"\"\n\n    # bound_account_ids - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_account_ids = \"\"\n\n    # bound_regions - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_regions = \"\"\n\n    # bound_vpc_ids - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_vpc_ids = \"\"\n\n    # bound_subnet_ids - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_subnet_ids = \"\"\n\n    # bound_iam_role_arns - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_iam_role_arns = \"\"\n\n    # bound_iam_instance_profile_arns - (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in `*`. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    bound_iam_instance_profile_arns = \"\"\n\n    # role_tag - (Optional) If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. `auth_type` must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this constraint.\n    role_tag = \"\"\n\n    # bound_iam_principal_arns - (Optional) If set, defines the IAM principal that must be authenticated when `auth_type` is set to `iam`. Wildcards are supported at the end of the ARN.\n    bound_iam_principal_arns = \"\"\n\n    # inferred_entity_type - (Optional) If set, instructs Vault to turn on inferencing. The only valid value is `ec2_instance`, which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when `auth_type` is set to `iam`.\n    inferred_entity_type = \"\"\n\n    # inferred_aws_region - (Optional) When `inferred_entity_type` is set, this is the region to search for the inferred entities. Required if `inferred_entity_type` is set. This only applies when `auth_type` is set to `iam`.\n    inferred_aws_region = \"\"\n\n    # resolve_aws_unique_ids - (Optional) If set to `true`, the `bound_iam_principal_arns` are resolved to [AWS Unique IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids) for the bound principal ARN. This field is ignored when a `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prior principals of the same name. Defaults to `true`. Once set to `true`, this cannot be changed to `false`--the role must be deleted and recreated, with the value set to `true`.\n    resolve_aws_unique_ids = \"\"\n\n    # ttl - (Optional) The TTL period of tokens issued using this role, provided as a number of seconds.\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum allowed lifetime of tokens issued using this role, provided as a number of seconds.\n    max_ttl = \"\"\n\n    # period - (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of seconds.\n    period = \"\"\n\n    # policies - (Optional) An array of strings specifying the policies to be set on tokens issued using this role.\n    policies = \"\"\n\n    # allow_instance_migration - (Optional) If set to `true`, allows migration of the underlying instance where the client resides.\n    allow_instance_migration = \"\"\n\n    # disallow_reauthentication - (Optional) IF set to `true`, only allows a single token to be granted per instance ID. This can only be set when `auth_type` is set to `ec2`.\n    disallow_reauthentication = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an AWS auth backend role in a Vault server. Roles constrain the\ninstances or principals that can perform the login operation against the\nbackend. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/aws.html) for more\ninformation.",
        "prefix": "vault-resource-aws-auth-backend-role"
    },
    "vault-resource-aws-auth-backend-role-tag": {
        "body": "resource \"resource\" \"$1\" {\n    # role - (Required) The name of the AWS auth backend role to read role tags from, with no leading or trailing `/`s.\n    role = \"\"\n\n    # backend - (Optional) The path to the AWS auth backend to read role tags from, with no leading or trailing `/`s. Defaults to \"aws\".\n    backend = \"\"\n\n    # policies - (Optional) The policies to be associated with the tag. Must be a subset of the policies associated with the role.\n    policies = \"\"\n\n    # max_ttl - (Optional) The maximum TTL of the tokens issued using this role.\n    max_ttl = \"\"\n\n    # instance_id - (Optional) Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.\n    instance_id = \"\"\n\n    # allow_instance_migration - (Optional) If set, allows migration of the underlying instances where the client resides. Use with caution.\n    allow_instance_migration = \"\"\n\n    # disallow_reauthentication - (Optional) If set, only allows a single token to be granted per instance ID.\n    disallow_reauthentication = \"\"\n\n    # Exported Attributes\n    # \"tag_key\" - The key of the role tag.\n    # \"tag_value\" - The value to set the role key.\n}",
        "description": "Reads role tag information from an AWS auth backend in Vault. ",
        "prefix": "vault-resource-aws-auth-backend-role-tag"
    },
    "vault-resource-aws-auth-backend-sts-role": {
        "body": "resource \"resource\" \"$1\" {\n    # account_id - (Optional) The AWS account ID to configure the STS role for.\n    account_id = \"\"\n\n    # sts_role - (Optional) The STS role to assume when verifying requests made  by EC2 instances in the account specified by `account_id`.\n    sts_role = \"\"\n\n    # backend - (Optional) The path the AWS auth backend being configured was  mounted at.  Defaults to `aws`.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an STS role in a Vault server. STS roles are mappings\nbetween account IDs and STS ARNs. When a login attempt is made\nfrom an EC2 instance in the account ID specified, the associated\nSTS role will be used to verify the request. For more information,\nsee the [Vault documentation](https://www.vaultproject.io/docs/auth/aws.html#cross-account-access). ~> **Important** All data provided in the resource configuration will be\n written in cleartext to state and plan files generated by Terraform, and will\n appear in the console output when Terraform runs. Protect these artifacts\n accordingly. See [the main provider documentation](../../index.html) for more\n details.",
        "prefix": "vault-resource-aws-auth-backend-sts-role"
    },
    "vault-resource-aws-secret-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # secret_key - (Required) The AWS Secret Key this backend should use to issue new credentials.\n    secret_key = \"\"\n\n    # access_key - (Required) The AWS Access Key ID this backend should use to issue new credentials.\n    access_key = \"\"\n\n    # region - (Optional) The AWS region for API calls. Defaults to `us-east-1`.\n    region = \"\"\n\n    # path - (Optional) The unique path this backend should be mounted at. Must not begin or end with a `/`. Defaults to `aws`.\n    path = \"\"\n\n    # description - (Optional) A human-friendly description for this backend.\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default TTL for credentials issued by this backend.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum TTL that can be requested for credentials issued by this backend.\n    max_lease_ttl_seconds = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates an AWS Secret Backend for Vault. AWS secret backends can then issue AWS\naccess keys and secret keys, once a role has been added to the backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-aws-secret-backend"
    },
    "vault-resource-aws-secret-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # name - (Required) The name to identify this role within the backend. Must be unique within the backend.\n    name = \"\"\n\n    # backend - (Required) The path the AWS secret backend is mounted at, with no leading or trailing `/`s.\n    backend = \"\"\n\n    # policy - (Optional) The JSON-formatted policy to associate with this role. Either `policy` or `policy_arn` must be specified.\n    policy = \"\"\n\n    # policy_arn - (Optional) The ARN for a pre-existing policy to associate with this role. Either `policy` or `policy_arn` must be specified.\n    policy_arn = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a role on an AWS Secret Backend for Vault. Roles are\nused to map credentials to the policies that generated them. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-aws-secret-backend-role"
    },
    "vault-resource-azure-auth-backend-config": {
        "body": "resource \"resource\" \"$1\" {\n    # resource - (Required) The configured URL for the application registered in \tAzure Active Directory.\n    resource = \"\"\n\n    # tenant_id - (Required) The tenant id for the Azure Active Directory \torganization.\n    tenant_id = \"\"\n\n    # backend - (Optional) The path the Azure auth backend being configured was \tmounted at.  Defaults to `azure`.\n    backend = \"\"\n\n    # client_id - (Optional) The client id for credentials to query the Azure APIs. \tCurrently read permissions to query compute resources are required.\n    client_id = \"\"\n\n    # client_secret - (Optional) The client secret for credentials to query the \tAzure APIs.\n    client_secret = \"\"\n\n    # environment - (Optional) The Azure cloud environment. Valid values: \tAzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, \tAzureGermanCloud.  Defaults to `AzurePublicCloud`.\n    environment = \"\"\n\n    # Exported Attributes\n}",
        "description": "Configures the Azure Auth Backend in Vault. This resource sets the access key and secret key that Vault will use\nwhen making API requests on behalf of an Azure Auth Backend. It can also\nbe used to override the URLs Vault uses when making those API requests. For more information, see the\n[Vault docs](https://www.vaultproject.io/api/auth/azure/index.html#configure). ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-azure-auth-backend-config"
    },
    "vault-resource-azure-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # role - (Required) The name of the role.\n    role = \"\"\n\n    # bound_service_principal_ids - (Optional) If set, defines a constraint on the service principals that can perform the login operation that they should be posess the ids specified by this field.\n    bound_service_principal_ids = \"\"\n\n    # bound_group_ids - (Optional) If set, defines a constraint on the groups that can perform the login operation that they should be using the group  ID specified by this field.\n    bound_group_ids = \"\"\n\n    # bound_locations - (Optional) If set, defines a constraint on the virtual machines that can perform the login operation that the location in their identity document must match the one specified by this field.\n    bound_locations = \"\"\n\n    # bound_subscription_ids - (Optional) If set, defines a constraint on the subscriptions that can perform the login operation to ones which  matches the value specified by this field.\n    bound_subscription_ids = \"\"\n\n    # bound_resource_groups - (Optional) If set, defines a constraint on the virtual machiness that can perform the login operation that they be associated with the resource group that matches the value specified by this field.\n    bound_resource_groups = \"\"\n\n    # bound_scale_sets - (Optional) If set, defines a constraint on the virtual machines that can perform the login operation that they must match the scale set specified by this field.\n    bound_scale_sets = \"\"\n\n    # ttl - (Optional) The TTL period of tokens issued using this role, provided as a number of seconds.\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum allowed lifetime of tokens issued using this role, provided as a number of seconds.\n    max_ttl = \"\"\n\n    # period - (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of seconds.\n    period = \"\"\n\n    # policies - (Optional) An array of strings specifying the policies to be set on tokens issued using this role.\n    policies = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages an Azure auth backend role in a Vault server. Roles constrain the\ninstances or principals that can perform the login operation against the\nbackend. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/azure.html) for more\ninformation.",
        "prefix": "vault-resource-azure-auth-backend-role"
    },
    "vault-resource-cert-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # certificate - (Required) CA certificate used to validate client certificates\n    certificate = \"\"\n\n    # name - (Required) Name of the role\n    name = \"\"\n\n    # allowed_names - (Optional) Allowed subject names for authenticated client certificates\n    allowed_names = \"\"\n\n    # required_exwtensions - (Optional) TLS extensions required on client certificates\n    required_exwtensions = \"\"\n\n    # ttl - (Optional) Default TTL of tokens issued by the backend\n    ttl = \"\"\n\n    # max_ttl - (Optional) Maximum TTL of tokens issued by the backend\n    max_ttl = \"\"\n\n    # period - (Optional) Duration in seconds for token.  If set, the issued token is a periodic token.\n    period = \"\"\n\n    # policies - (Optional) Policies to grant on the issued token\n    policies = \"\"\n\n    # display_name - (Optional) The name to display on tokens issued under this role.\n    display_name = \"\"\n\n    # backend - (Optional) Path to the mounted Cert auth backend\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a role in an [Cert auth backend within Vault](https://www.vaultproject.io/docs/auth/cert.html).",
        "prefix": "vault-resource-cert-auth-backend-role"
    },
    "vault-resource-consul-secret-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # address - (Required) Specifies the address of the Consul instance, provided as \"host:port\" like \"127.0.0.1:8500\".\n    address = \"\"\n\n    # token - (Required) The Consul management token this backend should use to issue new tokens.\n    token = \"\"\n\n    # backend - (Optional) The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults to `consul`.\n    backend = \"\"\n\n    # description - (Optional) A human-friendly description for this backend.\n    description = \"\"\n\n    # scheme - (Optional) Specifies the URL scheme to use. Defaults to `http`.\n    scheme = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default TTL for credentials issued by this backend.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum TTL that can be requested for credentials issued by this backend.\n    max_lease_ttl_seconds = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a Consul Secret Backend for Vault. Consul secret backends can then issue Consul tokens, once a role has been added to the backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-consul-secret-backend"
    },
    "vault-resource-database-secret-backend-connection": {
        "body": "resource \"resource\" \"$1\" {\n    # backend - (Required) The unique name of the Vault mount to configure.\n    backend = \"\"\n\n    # name - (Required) A unique name to give the database connection.\n    name = \"\"\n\n    # verify_connection - (Optional) Whether the connection should be verified on initial configuration or not.\n    verify_connection = \"\"\n\n    # allowed_roles - (Optional) A list of roles that are allowed to use this connection.\n    allowed_roles = \"\"\n\n    # cassandra - (Optional) A nested block containing configuration options for Cassandra connections.\n    cassandra = \"\"\n\n    # mongodb - (Optional) A nested block containing configuration options for MongoDB connections.\n    mongodb = \"\"\n\n    # hana - (Optional) A nested block containing configuration options for SAP HanaDB connections.\n    hana = \"\"\n\n    # mssql - (Optional) A nested block containing configuration options for MSSQL connections.\n    mssql = \"\"\n\n    # mysql - (Optional) A nested block containing configuration options for MySQL connections.\n    mysql = \"\"\n\n    # mysql_rds - (Optional) A nested block containing configuration options for RDS MySQL connections.\n    mysql_rds = \"\"\n\n    # mysql_aurora - (Optional) A nested block containing configuration options for Aurora MySQL connections.\n    mysql_aurora = \"\"\n\n    # mysql_legacy - (Optional) A nested block containing configuration options for legacy MySQL connections.\n    mysql_legacy = \"\"\n\n    # postgresql - (Optional) A nested block containing configuration options for PostgreSQL connections.\n    postgresql = \"\"\n\n    # oracle - (Optional) A nested block containing configuration options for Oracle connections.\n    oracle = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a Database Secret Backend connection in Vault. Database secret backend\nconnections can be used to generate dynamic credentials for the database. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-database-secret-backend-connection"
    },
    "vault-resource-database-secret-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # creation_statements - (Required) The database statements to execute when creating a user.\n    creation_statements = \"\"\n\n    # db_name - (Required) The unique name of the database connection to use for the role.\n    db_name = \"\"\n\n    # backend - (Required) The unique name of the Vault mount to configure.\n    backend = \"\"\n\n    # name - (Required) A unique name to give the role.\n    name = \"\"\n\n    # revocation_statements - (Optional) The database statements to execute when revoking a user.\n    revocation_statements = \"\"\n\n    # rollback_statements - (Optional) The database statements to execute when rolling back creation due to an error.\n    rollback_statements = \"\"\n\n    # renew_statements - (Optional) The database statements to execute when renewing a user.\n    renew_statements = \"\"\n\n    # default_ttl - (Optional) The default number of seconds for leases for this role.\n    default_ttl = \"\"\n\n    # max_ttl - (Optional) The maximum number of seconds for leases for this role.\n    max_ttl = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a Database Secret Backend role in Vault. Database secret backend\nroles can be used to generate dynamic credentials for the database. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-database-secret-backend-role"
    },
    "vault-resource-egp-policy": {
        "body": "resource \"resource\" \"$1\" {\n    # policy - (Required) String containing a Sentinel policy\n    policy = \"\"\n\n    # enforcement_level - (Required) Enforcement level of Sentinel policy. Can be either `advisory` or `soft-mandatory` or `hard-mandatory`\n    enforcement_level = \"\"\n\n    # paths - (Required) List of paths to which the policy will be applied to\n    paths = \"\"\n\n    # name - (Required) The name of the policy\n    name = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to manage Endpoint Governing Policy (EGP) via [Sentinel](https://www.vaultproject.io/docs/enterprise/sentinel/index.html). **Note** this feature is available only with Vault Enterprise.",
        "prefix": "vault-resource-egp-policy"
    },
    "vault-resource-gcp-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # project_id - (Required) GCP Project that the role exists within\n    project_id = \"\"\n\n    # type - (Required) Type of GCP authentication role (either `gce` or `iam`)\n    type = \"\"\n\n    # role - (Required) Name of the GCP role\n    role = \"\"\n\n    # ttl - (Optional) Default TTL of tokens issued by the backend\n    ttl = \"\"\n\n    # max_ttl - (Optional) Maximum TTL of tokens issued by the backend\n    max_ttl = \"\"\n\n    # period - (Optional) Duration in seconds for token.  If set, the issued token is a periodic token.\n    period = \"\"\n\n    # policies - (Optional) Policies to grant on the issued token\n    policies = \"\"\n\n    # backend - (Optional) Path to the mounted GCP auth backend\n    backend = \"\"\n\n    # bound_service_accounts - (Optional) GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`We)\n    bound_service_accounts = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a role in an [GCP auth backend within Vault](https://www.vaultproject.io/docs/auth/gcp.html).",
        "prefix": "vault-resource-gcp-auth-backend-role"
    },
    "vault-resource-gcp-secret-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # credentials - (Optional) The GCP service account credentails in JSON format.\n    credentials = \"\"\n\n    # path - (Optional) The unique path this backend should be mounted at. Must not begin or end with a `/`. Defaults to `gcp`.\n    path = \"\"\n\n    # description - (Optional) A human-friendly description for this backend.\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default TTL for credentials issued by this backend. Defaults to '3600'.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum TTL that can be requested for credentials issued by this backend. Defaults to '86400'.\n    max_lease_ttl_seconds = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates an GCP Secret Backend for Vault. GCP secret backends can then issue GCP\nOAuth token or Service Account keys, once a role has been added to the backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-gcp-secret-backend"
    },
    "vault-resource-generic-secret": {
        "body": "resource \"resource\" \"$1\" {\n    # data_json - (Required) String containing a JSON-encoded object that will be written as the secret data at the given path.\n    data_json = \"\"\n\n    # path - (Required) The full logical path at which to write the given data. To write data into the \"generic\" secret backend mounted in Vault by default, this should be prefixed with `secret/`. Writing to other backends with this resource is possible; consult each backend's documentation to see which endpoints support the `PUT` and `DELETE` methods.\n    path = \"\"\n\n    # allow_read - (Optional) (Optional, Deprecated) True/false. Set this to true if your vault authentication is able to read the data, this allows the resource to be compared and updated. Defaults to false.\n    allow_read = \"\"\n\n    # disable_read - (Optional) True/false. Set this to true if your vault authentication is not able to read the data. Setting this to `true` will break drift detection. Defaults to false.\n    disable_read = \"\"\n\n    # Exported Attributes\n}",
        "description": "Writes and manages arbitrary data at a given path in Vault. This resource is primarily intended to be used with\n[Vault's \"generic\" secret backend](https://www.vaultproject.io/docs/secrets/generic/index.html),\nbut it is also compatible with any other Vault endpoint that supports\nthe `vault write` command to create and the `vault delete` command to\ndelete. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-generic-secret"
    },
    "vault-resource-identity-entity": {
        "body": "resource \"resource\" \"$1\" {\n    # name - (Required) Name of the identity entity to create.\n    name = \"\"\n\n    # policies - (Optional) A list of policies to apply to the entity.\n    policies = \"\"\n\n    # metadata - (Optional) A Map of additional metadata to associate with the user.\n    metadata = \"\"\n\n    # disabled - (Optional) True/false Is this entity currently disabled. Defaults to `false`\n    disabled = \"\"\n\n    # Exported Attributes\n    # \"id\" - The \"id\" of the created entity.\n    # \"disabled\" - (Optional) True/false Is this entity currently disabled. Defaults to \"false\"\n}",
        "description": "Creates an Identity Entity for Vault. The Identity secrets engine is the identity management solution for Vault. It internally maintains the clients who are recognized by Vault. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-identity-entity"
    },
    "vault-resource-identity-entity-alias": {
        "body": "resource \"resource\" \"$1\" {\n    # canonical_id - (Required) Entity ID to which this alias belongs to.\n    canonical_id = \"\"\n\n    # mount_accessor - (Required) Accessor of the mount to which the alias should belong to.\n    mount_accessor = \"\"\n\n    # name - (Required) Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.\n    name = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the entity alias.\n    # \"canonical_id\" - (Required) Entity ID to which this alias belongs to.\n}",
        "description": "Creates an Identity Entity Alias for Vault.  ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-identity-entity-alias"
    },
    "vault-resource-jwt-auth-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # path - (Required) Path to mount the JWT auth backend\n    path = \"\"\n\n    # description - (Optional) The description of the auth backend\n    description = \"\"\n\n    # oidc_discovery_url - (Optional) The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwt_validation_pubkeys`\n    oidc_discovery_url = \"\"\n\n    # bound_issuer - (Optional) The value against which to match the iss claim in a JWT\n    bound_issuer = \"\"\n\n    # oidc_discovery_ca_pem - (Optional) The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used\n    oidc_discovery_ca_pem = \"\"\n\n    # jwt_validation_pubkeys - (Optional) A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidc_discovery_url`\n    jwt_validation_pubkeys = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource for managing an\n[JWT auth backend within Vault](https://www.vaultproject.io/docs/auth/jwt.html).",
        "prefix": "vault-resource-jwt-auth-backend"
    },
    "vault-resource-ldap-auth-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # url - (Required) The URL of the LDAP server\n    url = \"\"\n\n    # starttls - (Optional) Control use of TLS when conecting to LDAP\n    starttls = \"\"\n\n    # tls_min_version - (Optional) Minimum acceptable version of TLS\n    tls_min_version = \"\"\n\n    # tls_max_version - (Optional) Maximum acceptable version of TLS\n    tls_max_version = \"\"\n\n    # insecure_tls - (Optional) Control whether or TLS certificates must be validated\n    insecure_tls = \"\"\n\n    # certificate - (Optional) Trusted CA to validate TLS certificate\n    certificate = \"\"\n\n    # binddn - (Optional) DN of object to bind when performing user search\n    binddn = \"\"\n\n    # bindpass - (Optional) Password to use with `binddn` when performing user search\n    bindpass = \"\"\n\n    # userdn - (Optional) Base DN under which to perform user search\n    userdn = \"\"\n\n    # userattr - (Optional) Attribute on user object matching username passed in\n    userattr = \"\"\n\n    # upndomain - (Optional) The userPrincipalDomain used to construct UPN string\n    upndomain = \"\"\n\n    # discoverdn - (Optional) Use anonymous bind to discover the bind DN of a user.\n    discoverdn = \"\"\n\n    # deny_null_bind - (Optional) Prevents users from bypassing authentication when providing an empty password.\n    deny_null_bind = \"\"\n\n    # upndomain - (Optional) The `userPrincipalDomain` used to construct the UPN string for the authenticating user.\n    upndomain = \"\"\n\n    # groupfilter - (Optional) Go template used to construct group membership query\n    groupfilter = \"\"\n\n    # groupdn - (Optional) Base DN under which to perform group search\n    groupdn = \"\"\n\n    # groupattr - (Optional) LDAP attribute to follow on objects returned by groupfilter\n    groupattr = \"\"\n\n    # path - (Optional) Path to mount the LDAP auth backend under\n    path = \"\"\n\n    # description - (Optional) Description for the LDAP auth backend mount\n    description = \"\"\n\n    # Exported Attributes\n    # \"accessor\" - The accessor for this auth mount.\n    # \"description\" - (Optional) Description for the LDAP auth backend mount\n}",
        "description": "Provides a resource for managing an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).",
        "prefix": "vault-resource-ldap-auth-backend"
    },
    "vault-resource-ldap-auth-backend-group": {
        "body": "resource \"resource\" \"$1\" {\n    # groupname - (Required) The LDAP groupname\n    groupname = \"\"\n\n    # policies - (Optional) Policies which should be granted to members of the group\n    policies = \"\"\n\n    # backend - (Optional) Path to the authentication backend\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a group in an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).",
        "prefix": "vault-resource-ldap-auth-backend-group"
    },
    "vault-resource-ldap-auth-backend-user": {
        "body": "resource \"resource\" \"$1\" {\n    # username - (Required) The LDAP username\n    username = \"\"\n\n    # policies - (Optional) Policies which should be granted to user\n    policies = \"\"\n\n    # groups - (Optional) Override LDAP groups which should be granted to user\n    groups = \"\"\n\n    # backend - (Optional) Path to the authentication backend\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a user in an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).",
        "prefix": "vault-resource-ldap-auth-backend-user"
    },
    "vault-resource-mount": {
        "body": "resource \"resource\" \"$1\" {\n    # type - (Required) Type of the backend, such as \"aws\"\n    type = \"\"\n\n    # path - (Required) Where the secret backend will be mounted\n    path = \"\"\n\n    # description - (Optional) Human-friendly description of the mount\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) Default lease duration for tokens and secrets in seconds\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) Maximum possible lease duration for tokens and secrets in seconds\n    max_lease_ttl_seconds = \"\"\n\n    # options - (Optional) Specifies mount type specific options that are passed to the backend\n    options = \"\"\n\n    # Exported Attributes\n    # \"accessor\" - The accessor for this mount.\n    # \"options\" - (Optional) Specifies mount type specific options that are passed to the backend\n}",
        "description": "",
        "prefix": "vault-resource-mount"
    },
    "vault-resource-okta-auth-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # organization - (Required) The Okta organization. This will be the first part of the url `https://XXX.okta.com`\n    organization = \"\"\n\n    # path - (Required) Path to mount the Okta auth backend\n    path = \"\"\n\n    # description - (Optional) The description of the auth backend\n    description = \"\"\n\n    # token - (Optional) The Okta API token. This is required to query Okta for user group membership. If this is not supplied only locally configured groups will be enabled.\n    token = \"\"\n\n    # base_url - (Optional) The Okta url. Examples: oktapreview.com, okta.com\n    base_url = \"\"\n\n    # bypass_okta_mfa - (Optional) When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.\n    bypass_okta_mfa = \"\"\n\n    # ttl - (Optional) Duration after which authentication will be expired. [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).\n    ttl = \"\"\n\n    # max_ttl - (Optional) Maximum duration after which authentication will be expired [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).\n    max_ttl = \"\"\n\n    # group - (Optional) Associate Okta groups with policies within Vault. [See below for more details](#okta-group). \n    group = \"\"\n\n    # user - (Optional) Associate Okta users with groups or policies within Vault. [See below for more details](#okta-user). \n    user = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource for managing an\n[Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).",
        "prefix": "vault-resource-okta-auth-backend"
    },
    "vault-resource-okta-auth-backend-group": {
        "body": "resource \"resource\" \"$1\" {\n    # group_name - (Required) Name of the group within the Okta\n    group_name = \"\"\n\n    # path - (Required) The path where the Okta auth backend is mounted\n    path = \"\"\n\n    # policies - (Optional) Vault policies to associate with this group\n    policies = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a group in an\n[Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).",
        "prefix": "vault-resource-okta-auth-backend-group"
    },
    "vault-resource-okta-auth-backend-user": {
        "body": "resource \"resource\" \"$1\" {\n    # path - (Required) The path where the Okta auth backend is mounted\n    path = \"\"\n\n    # username - (Optional) (Required Optional) Name of the user within Okta\n    username = \"\"\n\n    # groups - (Optional) List of Okta groups to associate with this user\n    groups = \"\"\n\n    # policies - (Optional) List of Vault policies to associate with this user\n    policies = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to create a user in an\n[Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).",
        "prefix": "vault-resource-okta-auth-backend-user"
    },
    "vault-resource-pki-secret-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # path - (Required) The unique path this backend should be mounted at. Must not begin or end with a `/`.\n    path = \"\"\n\n    # description - (Optional) A human-friendly description for this backend.\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default TTL for credentials issued by this backend.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum TTL that can be requested for credentials issued by this backend.\n    max_lease_ttl_seconds = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates an PKI Secret Backend for Vault. PKI secret backends can then issue certificates, once a role has been added to\nthe backend.",
        "prefix": "vault-resource-pki-secret-backend"
    },
    "vault-resource-pki-secret-backend-cert": {
        "body": "resource \"resource\" \"$1\" {\n    # common_name - (Required) CN of certificate to create\n    common_name = \"\"\n\n    # name - (Required) Name of the role to create the certificate against\n    name = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # alt_names - (Optional) List of alternative names\n    alt_names = \"\"\n\n    # ip_sans - (Optional) List of alternative IPs\n    ip_sans = \"\"\n\n    # other_sans - (Optional) List of other SANs\n    other_sans = \"\"\n\n    # ttl - (Optional) Time to leave\n    ttl = \"\"\n\n    # format - (Optional) The format of data\n    format = \"\"\n\n    # private_key_format - (Optional) The private key format\n    private_key_format = \"\"\n\n    # exclude_cn_from_sans - (Optional) Flag to exclude CN from SANs\n    exclude_cn_from_sans = \"\"\n\n    # Exported Attributes\n    # \"certificate\" - The certificate\n    # \"issuing_ca\" - The issuing CA\n    # \"ca_chain\" - The CA chain\n    # \"private_key\" - The private key\n    # \"private_key_type\" - The private key type\n    # \"serial_number\" - The serial number\n}",
        "description": "Generates a certificate from the PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-cert"
    },
    "vault-resource-pki-secret-backend-config-ca": {
        "body": "resource \"resource\" \"$1\" {\n    # pem_bundle - (Required) The key and certificate PEM bundle\n    pem_bundle = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Submits the CA information to a PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-config-ca"
    },
    "vault-resource-pki-secret-backend-intermediate-cert-request": {
        "body": "resource \"resource\" \"$1\" {\n    # common_name - (Required) CN of intermediate to create\n    common_name = \"\"\n\n    # type - (Required) Type of intermediate to create. Must be either \\\"exported\\\" or \\\"internal\\\"\n    type = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # alt_names - (Optional) List of alternative names\n    alt_names = \"\"\n\n    # ip_sans - (Optional) List of alternative IPs\n    ip_sans = \"\"\n\n    # other_sans - (Optional) List of other SANs\n    other_sans = \"\"\n\n    # format - (Optional) The format of data\n    format = \"\"\n\n    # private_key_format - (Optional) The private key format\n    private_key_format = \"\"\n\n    # key_type - (Optional) The desired key type\n    key_type = \"\"\n\n    # key_bits - (Optional) The number of bits to use\n    key_bits = \"\"\n\n    # exclude_cn_from_sans - (Optional) Flag to exclude CN from SANs\t \t\t\t\n    exclude_cn_from_sans = \"\"\n\n    # ou - (Optional) The organization unit\n    ou = \"\"\n\n    # organization - (Optional) The organization\n    organization = \"\"\n\n    # country - (Optional) The country\n    country = \"\"\n\n    # locality - (Optional) The locality\n    locality = \"\"\n\n    # province - (Optional) The province\n    province = \"\"\n\n    # street_address - (Optional) The street address\n    street_address = \"\"\n\n    # postal_code - (Optional) The postal code\n    postal_code = \"\"\n\n    # Exported Attributes\n    # \"csr\" - The CSR\n    # \"private_key\" - The private key\n    # \"private_key_type\" - The private key type\n    # \"serial_number\" - The serial number\n}",
        "description": "Generates a new private key and a CSR for signing the PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-intermediate-cert-request"
    },
    "vault-resource-pki-secret-backend-intermediate-set-signed": {
        "body": "resource \"resource\" \"$1\" {\n    # certificate - (Required) The certificate\n    certificate = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # Exported Attributes\n}",
        "description": "Submits the CA certificate to the PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-intermediate-set-signed"
    },
    "vault-resource-pki-secret-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # name - (Required) The name to identify this role within the backend. Must be unique within the backend.\n    name = \"\"\n\n    # backend - (Required) The path the PKI secret backend is mounted at, with no leading or trailing `/`s.\n    backend = \"\"\n\n    # ttl - (Optional) The TTL\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum TTL\n    max_ttl = \"\"\n\n    # allow_localhost - (Optional) Flag to allow certificates for localhost\n    allow_localhost = \"\"\n\n    # allowed_domains - (Optional) List of allowed domains for certificates \n    allowed_domains = \"\"\n\n    # allow_bare_domains - (Optional) Flag to allow certificates matching the actual domain\n    allow_bare_domains = \"\"\n\n    # allow_subdomains - (Optional) Flag to allow certificates matching subdomains\n    allow_subdomains = \"\"\n\n    # allow_glob_domains - (Optional) Flag to allow names containing glob patterns.\n    allow_glob_domains = \"\"\n\n    # allow_any_name - (Optional) Flag to allow any name\n    allow_any_name = \"\"\n\n    # enforce_hostnames - (Optional) Flag to allow only valid host names\n    enforce_hostnames = \"\"\n\n    # allow_ip_sans - (Optional) Flag to allow IP SANs\n    allow_ip_sans = \"\"\n\n    # allowed_uri_sans - (Optional) Defines allowed URI SANs\n    allowed_uri_sans = \"\"\n\n    # allowed_other_sans - (Optional) Defines allowed custom SANs\n    allowed_other_sans = \"\"\n\n    # server_flag - (Optional) Flag to specify certificates for server use\n    server_flag = \"\"\n\n    # client_flag - (Optional) Flag to specify certificates for client use\n    client_flag = \"\"\n\n    # code_signing_flag - (Optional) Flag to specify certificates for code signing use\n    code_signing_flag = \"\"\n\n    # email_protection_flag - (Optional) Flag to specify certificates for email protection use\n    email_protection_flag = \"\"\n\n    # key_type - (Optional) The type of generated keys\n    key_type = \"\"\n\n    # key_bits - (Optional) The number of bits of generated keys\n    key_bits = \"\"\n\n    # key_usage - (Optional) Specify the allowed key usage constraint on issued certificates\n    key_usage = \"\"\n\n    # ext_key_usage - (Optional) Specify the allowed extended key usage constraint on issued certificates\n    ext_key_usage = \"\"\n\n    # use_csr_common_name - (Optional) Flag to use the CN in the CSR\n    use_csr_common_name = \"\"\n\n    # use_csr_sans - (Optional) Flag to use the SANs in the CSR\n    use_csr_sans = \"\"\n\n    # ou - (Optional) The organization unit of generated certificates\n    ou = \"\"\n\n    # organization - (Optional) The organization of generated certificates\n    organization = \"\"\n\n    # country - (Optional) The country of generated certificates\n    country = \"\"\n\n    # locality - (Optional) The locality of generated certificates\n    locality = \"\"\n\n    # province - (Optional) The province of generated certificates\n    province = \"\"\n\n    # street_address - (Optional) The street address of generated certificates\n    street_address = \"\"\n\n    # postal_code - (Optional) The postal code of generated certificates\n    postal_code = \"\"\n\n    # generate_lease - (Optional) Flag to generate leases with certificates\n    generate_lease = \"\"\n\n    # no_store - (Optional) Flag to not store certificates in the storage backend\n    no_store = \"\"\n\n    # require_cn - (Optional) Flag to force CN usage\n    require_cn = \"\"\n\n    # policy_identifiers - (Optional) Specify the list of allowed policies IODs\n    policy_identifiers = \"\"\n\n    # basic_constraints_valid_for_non_ca - (Optional) Flag to mark basic constraints valid when issuing non-CA certificates\n    basic_constraints_valid_for_non_ca = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a role on an PKI Secret Backend for Vault.",
        "prefix": "vault-resource-pki-secret-backend-role"
    },
    "vault-resource-pki-secret-backend-root-cert": {
        "body": "resource \"resource\" \"$1\" {\n    # common_name - (Required) CN of intermediate to create\n    common_name = \"\"\n\n    # type - (Required) Type of intermediate to create. Must be either \\\"exported\\\" or \\\"internal\\\"\n    type = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # alt_names - (Optional) List of alternative names\n    alt_names = \"\"\n\n    # ip_sans - (Optional) List of alternative IPs\n    ip_sans = \"\"\n\n    # uri_sans - (Optional) List of alternative URIs\n    uri_sans = \"\"\n\n    # other_sans - (Optional) List of other SANs\n    other_sans = \"\"\n\n    # ttl - (Optional) Time to leave\n    ttl = \"\"\n\n    # format - (Optional) The format of data\n    format = \"\"\n\n    # private_key_format - (Optional) The private key format\n    private_key_format = \"\"\n\n    # key_type - (Optional) The desired key type\n    key_type = \"\"\n\n    # key_bits - (Optional) The number of bits to use\n    key_bits = \"\"\n\n    # max_path_length - (Optional) The maximum path length to encode in the generated certificate\n    max_path_length = \"\"\n\n    # exclude_cn_from_sans - (Optional) Flag to exclude CN from SANs\t\n    exclude_cn_from_sans = \"\"\n\n    # permitted_dns_domains - (Optional) List of domains for which certificates are allowed to be issued \t\t\t\n    permitted_dns_domains = \"\"\n\n    # ou - (Optional) The organization unit\n    ou = \"\"\n\n    # organization - (Optional) The organization\n    organization = \"\"\n\n    # country - (Optional) The country\n    country = \"\"\n\n    # locality - (Optional) The locality\n    locality = \"\"\n\n    # province - (Optional) The province\n    province = \"\"\n\n    # street_address - (Optional) The street address\n    street_address = \"\"\n\n    # postal_code - (Optional) The postal code\n    postal_code = \"\"\n\n    # Exported Attributes\n    # \"certificate\" - The certificate\n    # \"issuing_ca\" - The issuing CA\n    # \"private_key\" - The private key\n    # \"serial\" - The serial\n}",
        "description": "Generates a new self-signed CA certificate and private keys for the PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-root-cert"
    },
    "vault-resource-pki-secret-backend-sign": {
        "body": "resource \"resource\" \"$1\" {\n    # common_name - (Required) CN of certificate to create\n    common_name = \"\"\n\n    # csr - (Required) The CSR\n    csr = \"\"\n\n    # name - (Required) Name of the role to create the certificate against\n    name = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # alt_names - (Optional) List of alternative names\n    alt_names = \"\"\n\n    # other_sans - (Optional) List of other SANs\n    other_sans = \"\"\n\n    # ip_sans - (Optional) List of alternative IPs\n    ip_sans = \"\"\n\n    # uri_sans - (Optional) List of alterative URIs\n    uri_sans = \"\"\n\n    # ttl - (Optional) Time to leave\n    ttl = \"\"\n\n    # format - (Optional) The format of data\n    format = \"\"\n\n    # exclude_cn_from_sans - (Optional) Flag to exclude CN from SANs\n    exclude_cn_from_sans = \"\"\n\n    # Exported Attributes\n    # \"certificate\" - The certificate\n    # \"issuing_ca\" - The issuing CA\n    # \"ca_chain\" - The CA chain\n    # \"serial\" - The serial\n}",
        "description": "Signs a new certificate based upon the provided CSR and the supplied parameters by the PKI Secret Backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-pki-secret-backend-sign"
    },
    "vault-resource-pki-secret-backend_cert": {
        "body": "resource \"resource\" \"$1\" {\n    # common_name - (Required) CN of intermediate to create\n    common_name = \"\"\n\n    # csr - (Required) The CSR\n    csr = \"\"\n\n    # backend - (Required) The PKI secret backend the resource belongs to.\n    backend = \"\"\n\n    # alt_names - (Optional) List of alternative names\n    alt_names = \"\"\n\n    # ip_sans - (Optional) List of alternative IPs\n    ip_sans = \"\"\n\n    # uri_sans - (Optional) List of alternative URIs\n    uri_sans = \"\"\n\n    # other_sans - (Optional) List of other SANs\n    other_sans = \"\"\n\n    # ttl - (Optional) Time to leave\n    ttl = \"\"\n\n    # format - (Optional) The format of data\n    format = \"\"\n\n    # private_key_format - (Optional) The private key format\n    private_key_format = \"\"\n\n    # key_type - (Optional) The desired key type\n    key_type = \"\"\n\n    # key_bits - (Optional) The number of bits to use\n    key_bits = \"\"\n\n    # max_path_length - (Optional) The maximum path length to encode in the generated certificate\n    max_path_length = \"\"\n\n    # exclude_cn_from_sans - (Optional) Flag to exclude CN from SANs\t\n    exclude_cn_from_sans = \"\"\n\n    # use_csr_values - (Optional) Preserve CSR values\n    use_csr_values = \"\"\n\n    # permitted_dns_domains - (Optional) List of domains for which certificates are allowed to be issued \t\t\t\n    permitted_dns_domains = \"\"\n\n    # ou - (Optional) The organization unit\n    ou = \"\"\n\n    # organization - (Optional) The organization\n    organization = \"\"\n\n    # country - (Optional) The country\n    country = \"\"\n\n    # locality - (Optional) The locality\n    locality = \"\"\n\n    # province - (Optional) The province\n    province = \"\"\n\n    # street_address - (Optional) The street address\n    street_address = \"\"\n\n    # postal_code - (Optional) The postal code\n    postal_code = \"\"\n\n    # Exported Attributes\n    # \"certificate\" - The certificate\n    # \"issuing_ca\" - The issuing CA\n    # \"ca_chain\" - The CA chain\n    # \"serial\" - The serial\n}",
        "description": "Creates an PKI certificate.",
        "prefix": "vault-resource-pki-secret-backend_cert"
    },
    "vault-resource-policy": {
        "body": "resource \"resource\" \"$1\" {\n    # policy - (Required) String containing a Vault policy\n    policy = \"\"\n\n    # name - (Required) The name of the policy\n    name = \"\"\n\n    # Exported Attributes\n}",
        "description": "",
        "prefix": "vault-resource-policy"
    },
    "vault-resource-rabbitmq-secret-backend": {
        "body": "resource \"resource\" \"$1\" {\n    # password - (Required) Specifies the RabbitMQ management administrator password.\n    password = \"\"\n\n    # username - (Required) Specifies the RabbitMQ management administrator username.\n    username = \"\"\n\n    # connection_uri - (Required)  Specifies the RabbitMQ connection URI.\n    connection_uri = \"\"\n\n    # verify_connection - (Optional) Specifies whether to verify connection URI, username, and password. Defaults to `true`.\n    verify_connection = \"\"\n\n    # path - (Optional) The unique path this backend should be mounted at. Must not begin or end with a `/`. Defaults to `aws`.\n    path = \"\"\n\n    # description - (Optional) A human-friendly description for this backend.\n    description = \"\"\n\n    # default_lease_ttl_seconds - (Optional) The default TTL for credentials issued by this backend.\n    default_lease_ttl_seconds = \"\"\n\n    # max_lease_ttl_seconds - (Optional) The maximum TTL that can be requested for credentials issued by this backend.\n    max_lease_ttl_seconds = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates an RabbitMQ Secret Backend for Vault. RabbitMQ secret backends can then issue RabbitMQ credentials,\n once a role has been added to the backend. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-rabbitmq-secret-backend"
    },
    "vault-resource-rabbitmq-secret-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # name - (Required) The name to identify this role within the backend. Must be unique within the backend.\n    name = \"\"\n\n    # backend - (Required) The path the RabbitMQ secret backend is mounted at, with no leading or trailing `/`s.\n    backend = \"\"\n\n    # tags - (Optional) Specifies a comma-separated RabbitMQ management tags.\n    tags = \"\"\n\n    # vhost - (Optional) Specifies a map of virtual hosts to permissions.\n    vhost = \"\"\n\n    # Exported Attributes\n}",
        "description": "Creates a role on an RabbitMQ Secret Backend for Vault. Roles are\nused to map credentials to the policies that generated them. ~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
        "prefix": "vault-resource-rabbitmq-secret-backend-role"
    },
    "vault-resource-rgp-policy": {
        "body": "resource \"resource\" \"$1\" {\n    # policy - (Required) String containing a Sentinel policy\n    policy = \"\"\n\n    # enforcement_level - (Required) Enforcement level of Sentinel policy. Can be either `advisory` or `soft-mandatory` or `hard-mandatory`\n    enforcement_level = \"\"\n\n    # name - (Required) The name of the policy\n    name = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to manage Role Governing Policy (RGP) via [Sentinel](https://www.vaultproject.io/docs/enterprise/sentinel/index.html). **Note** this feature is available only with Vault Enterprise.",
        "prefix": "vault-resource-rgp-policy"
    },
    "vault-resource-ssh-secret-backend-ca": {
        "body": "resource \"resource\" \"$1\" {\n    # backend - (Optional) The path where the SSH secret backend is mounted. Defaults to 'ssh'\n    backend = \"\"\n\n    # generate_signing_key - (Optional) Whether Vault should generate the signing key pair internally. Defaults to true\n    generate_signing_key = \"\"\n\n    # public_key - (Optional) The public key part the SSH CA key pair; required if generate_signing_key is false.\n    public_key = \"\"\n\n    # private_key - (Optional) The private key part the SSH CA key pair; required if generate_signing_key is false.\n    private_key = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a resource to manage CA information in an SSH secret backend\n[SSH secret backend within Vault](https://www.vaultproject.io/docs/secrets/ssh/index.html).",
        "prefix": "vault-resource-ssh-secret-backend-ca"
    },
    "vault-resource-token-auth-backend-role": {
        "body": "resource \"resource\" \"$1\" {\n    # role_name - (Required) The name of the role.\n    role_name = \"\"\n\n    # allowed_policies - (Optional) List of allowed policies for given role.\n    allowed_policies = \"\"\n\n    # disallowed_policies - (Optional) List of disallowed policies for given role.\n    disallowed_policies = \"\"\n\n    # orphan - (Optional) If true, tokens created against this policy will be orphan tokens.\n    orphan = \"\"\n\n    # period - (Optional) The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.\n    period = \"\"\n\n    # renewable - (Optional) Wether to disable the ability of the token to be renewed past its initial TTL.\n    renewable = \"\"\n\n    # explicit_max_ttl - (Optional) If set, the token will have an explicit max TTL set upon it.\n    explicit_max_ttl = \"\"\n\n    # path_suffix - (Optional) Tokens created against this role will have the given suffix as part of their path in addition to the role name.\n    path_suffix = \"\"\n\n    # ttl - (Optional) The TTL period of tokens issued using this role, provided as the number of minutes.\n    ttl = \"\"\n\n    # max_ttl - (Optional) The maximum allowed lifetime of tokens issued using this role.\n    max_ttl = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages Token auth backend role in a Vault server. See the [Vault\ndocumentation](https://www.vaultproject.io/docs/auth/token.html) for more\ninformation.",
        "prefix": "vault-resource-token-auth-backend-role"
    }
}