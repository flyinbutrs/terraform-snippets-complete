{
    "nsxt-datasource-edge-cluster": {
        "body": "data \"edge_cluster\" \"$1\" {\n    # id - (Optional) The ID of Edge Cluster to retrieve.\n    id = \"\"\n\n    # display_name - (Optional) The Display Name prefix of the Edge Cluster to retrieve.\n    display_name = \"\"\n\n    # Exported Attributes\n    # \"description\" - The description of the edge cluster.\n    # \"deployment_type\" - This field could show deployment_type of members. It would return UNKNOWN if there is no members, and return VIRTUAL_MACHINE|PHYSICAL_MACHINE if all Edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE.\n    # \"member_node_type\" - An Edge cluster is homogeneous collection of NSX transport nodes used for north/south connectivity between NSX logical networking and physical networking. Hence all transport nodes of the cluster must be of same type. This field shows the type of transport node,\n}",
        "description": "This data source provides information about Edge clusters configured in NSX. An Edge cluster is a collection of Edge nodes which can be deployed as either VM form-factor or bare-metal form-factor machines for connectivity between overlay logical switches and non-NSX underlay networking for north/south layer 2 or layer 3 connectivity. Each T0 router will be placed on one ore more Edge nodes in an Edge cluster therefore this data source is needed for the creation of T0 logical routers.",
        "prefix": "nsxt-datasource-edge-cluster"
    },
    "nsxt-datasource-logical-tier0-router": {
        "body": "data \"logical_tier0_router\" \"$1\" {\n    # id - (Optional) The ID of Logical Tier 0 Router to retrieve.\n    id = \"\"\n\n    # display_name - (Optional) The Display Name prefix of the Logical Tier 0 Router to retrieve.\n    display_name = \"\"\n\n    # Exported Attributes\n    # \"description\" - The description of the logical Tier 0 router.\n    # \"edge_cluster_id\" - The id of the Edge cluster where this logical router is placed.\n    # \"high_availability_mode\" - The high availability mode of this logical router.\n}",
        "description": "This data source provides information about logical Tier 0 routers configured in NSX. A Tier 0 router is used to connect NSX networking with traditional physical networking. Tier 0 routers are placed on an Edge cluster and will exist on one or more Edge node depending on deployment settings (i.e. active/active or active/passive). A Tier 0 router forwards layer 3 IP packets and typically peers with a traditional physical router using BGP or can use static routing.",
        "prefix": "nsxt-datasource-logical-tier0-router"
    },
    "nsxt-datasource-ns-service": {
        "body": "data \"ns_service\" \"$1\" {\n    # id - (Optional) The ID of NS service to retrieve\n    id = \"\"\n\n    # display_name - (Optional) The Display Name of the NS service to retrieve.\n    display_name = \"\"\n\n    # Exported Attributes\n    # \"description\" - The description of the NS service.\n    # \"display_name\" - (Optional) The Display Name of the NS service to retrieve.\n}",
        "description": "This data source provides information about a network and security (NS) service configured in NSX. NS services are either factory defined in NSX or can be defined by the NSX administrator. They provide a convenience name for a port/protocol pair that is often used in fire walling or load balancing.",
        "prefix": "nsxt-datasource-ns-service"
    },
    "nsxt-datasource-switching-profile": {
        "body": "data \"switching_profile\" \"$1\" {\n    # id - (Optional) The ID of Switching Profile to retrieve.\n    id = \"\"\n\n    # display_name - (Optional) The Display Name of the Switching Profile to retrieve.\n    display_name = \"\"\n\n    # Exported Attributes\n    # \"resource_type\" - The resource type representing the specific type of this switching profile.\n    # \"description\" - The description of the switching profile.\n}",
        "description": "The switching profile data source provides information about switching profiles configured in NSX. A switching profile is a template that defines the settings of one or more logical switches. There can be both factory default and user defined switching profiles. One example of a switching profile is a quality of service (QoS) profile which defines the QoS settings of all switches that use the defined switch profile.",
        "prefix": "nsxt-datasource-switching-profile"
    },
    "nsxt-datasource-transport-zone": {
        "body": "data \"transport_zone\" \"$1\" {\n    # id - (Optional) The ID of Transport Zone to retrieve.\n    id = \"\"\n\n    # display_name - (Optional) The Display Name prefix of the Transport Zone to retrieve.\n    display_name = \"\"\n\n    # Exported Attributes\n    # \"description\" - The description of the Transport Zone.\n    # \"host_switch_name\" - The name of the N-VDS (host switch) on all Transport Nodes in this Transport Zone that will be used to run NSX network traffic.\n    # \"transport_type\" - The transport type of this transport zone (OVERLAY or VLAN).\n}",
        "description": "This data source provides information about Transport Zones (TZ) configured in NSX. A Transport Zone defines the scope to which a network can extend in NSX. For example an overlay based Transport Zone is associated with both hypervisors and logical switches and defines which hypervisors will be able to serve the defined logical switch. Virtual machines on the hypervisor associated with a Transport Zone can be attached to logical switches in that same Transport Zone.",
        "prefix": "nsxt-datasource-transport-zone"
    },
    "nsxt-ns-service-resource-algorithm-type": {
        "body": "resource \"nsxt_algorithm_type_ns_service\" \"$1\" {\n    # algorithm - (Required) Algorithm one of \"ORACLE_TNS\", \"FTP\", \"SUN_RPC_TCP\", \"SUN_RPC_UDP\", \"MS_RPC_TCP\", \"MS_RPC_UDP\", \"NBNS_BROADCAST\", \"NBDG_BROADCAST\", \"TFTP\"\n    algorithm = \"\"\n\n    # destination_port - (Required) a single destination port.\n    destination_port = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description.\n    description = \"\"\n\n    # source_ports - (Optional) Set of source ports/ranges.\n    source_ports = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used with the NSX firewall. A networking and security service is an object that contains the TCP/UDP algorithm, source ports and destination ports in a single entity.",
        "prefix": "nsxt-ns-service-resource-algorithm-type"
    },
    "nsxt-ns-service-resource-ether-type": {
        "body": "resource \"nsxt_ether_type_ns_service\" \"$1\" {\n    # ether_type - (Required) Type of the encapsulated protocol.\n    ether_type = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used within NSX. This specific service is for the layer 2 Ethernet protocol.",
        "prefix": "nsxt-ns-service-resource-ether-type"
    },
    "nsxt-ns-service-resource-icmp-type": {
        "body": "resource \"nsxt_icmp_type_ns_service\" \"$1\" {\n    # protocol - (Required) Version of ICMP protocol ICMPv4 or ICMPv6.\n    protocol = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description.\n    description = \"\"\n\n    # icmp_type - (Optional) ICMP message type.\n    icmp_type = \"\"\n\n    # icmp_code - (Optional) ICMP message code\n    icmp_code = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used within NSX. This specific service is for the ICMP protocol.",
        "prefix": "nsxt-ns-service-resource-icmp-type"
    },
    "nsxt-ns-service-resource-igmp-type": {
        "body": "resource \"nsxt_igmp_type_ns_service\" \"$1\" {\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used within NSX. This specific service is for the IGMP protocol.",
        "prefix": "nsxt-ns-service-resource-igmp-type"
    },
    "nsxt-ns-service-resource-ip-protocol": {
        "body": "resource \"nsxt_ip_protocol_ns_service\" \"$1\" {\n    # protocol - (Required) IP protocol number (0-255)\n    protocol = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used within NSX. This specific service is for the IP protocol.",
        "prefix": "nsxt-ns-service-resource-ip-protocol"
    },
    "nsxt-ns-service-resource-l4-port-set": {
        "body": "resource \"nsxt_l4_port_set_ns_service\" \"$1\" {\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # destination_ports - (Optional) Set of destination ports.\n    destination_ports = \"\"\n\n    # source_ports - (Optional) Set of source ports.\n    source_ports = \"\"\n\n    # protocol - (Optional) VL4 protocol\n    protocol = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"default_service\" - The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure a networking and security service which can be used within NSX. This specific service is for configuration of layer 4 ports.",
        "prefix": "nsxt-ns-service-resource-l4-port-set"
    },
    "nsxt-resource-dhcp-relay-profile": {
        "body": "resource \"nsxt_dhcp_relay_profile\" \"$1\" {\n    # server_addresses - (Required) IP addresses of the DHCP relay servers.\n    server_addresses = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this dhcp relay profile.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the dhcp_relay_profile.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource can be used to configure a NSX DHCP relay profile on the NSX manager. A DHCP relay profile is a type of template that can be used to define a remote DHCP server where DHCP packets can be relayed for DHCP requests of machines attached to NSX logical topologies. The DHCP relay profile can be used in a DHCP relay service and later consumed by a router\nlink port.",
        "prefix": "nsxt-resource-dhcp-relay-profile"
    },
    "nsxt-resource-dhcp-relay-service": {
        "body": "resource \"nsxt_dhcp_relay_service\" \"$1\" {\n    # dhcp_relay_profile_id - (Required) dhcp relay profile referenced by the dhcp relay service.\n    dhcp_relay_profile_id = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this dhcp_relay_service.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the dhcp_relay_service.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a way to configure the DHCP relay service on the NSX manager.\nThe DHCP relay service uses a DHCP relay profile and later consumed by a router\nlink port to provide DHCP addresses to virtual machines connected to a logical switch.",
        "prefix": "nsxt-resource-dhcp-relay-service"
    },
    "nsxt-resource-firewall-section": {
        "body": "resource \"nsxt_firewall_section\" \"$1\" {\n    # action - (Required) Action enforced on the packets which matches the firewall rule. [Allowed values: \"ALLOW\", \"DROP\", \"REJECT\"]\n    action = \"\"\n\n    # stateful - (Required) Stateful or Stateless nature of firewall section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.\n    stateful = \"\"\n\n    # section_type - (Required) Type of the rules which a section can contain. Either LAYER2 or LAYER3. Only homogeneous sections are supported.\n    section_type = \"\"\n\n    # display_name - (Optional) The display name of this firewall section. Defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of this firewall section.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this firewall section.\n    tag = \"\"\n\n    # applied_to - (Optional) List of objects where the rules in this section will be enforced. This will take precedence over rule level applied_to. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\"]\n    applied_to = \"\"\n\n    # rule - (Optional) A list of rules to be applied in this section. each rule has the following arguments:\n    rule = \"\"\n\n    # display_name - (Optional) The display name of this rule. Defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of this rule.\n    description = \"\"\n\n    # applied_to - (Optional) List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\"]\n    applied_to = \"\"\n\n    # destination - (Optional) List of the destinations. Null will be treated as any. [Allowed target types: \"IPSet\", \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"MACSet\" (depending on the section type)]\n    destination = \"\"\n\n    # destinations_excluded - (Optional) Negation of the destination.\n    destinations_excluded = \"\"\n\n    # direction - (Optional) Rule direction in case of stateless firewall rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified. [Allowed values: \"IN\", \"OUT\", \"IN_OUT\"]\n    direction = \"\"\n\n    # disabled - (Optional) Flag to disable rule. Disabled will only be persisted but never provisioned/realized.\n    disabled = \"\"\n\n    # ip_protocol - (Optional) Type of IP packet that should be matched while enforcing the rule. [allowed values: \"IPV4\", \"IPV6\", \"IPV4_IPV6\"]\n    ip_protocol = \"\"\n\n    # logged - (Optional) Flag to enable packet logging. Default is disabled.\n    logged = \"\"\n\n    # notes - (Optional) User notes specific to the rule.\n    notes = \"\"\n\n    # rule_tag - (Optional) User level field which will be printed in CLI and packet logs.\n    rule_tag = \"\"\n\n    # service - (Optional) List of the services. Null will be treated as any. [Allowed target types: \"NSService\", \"NSServiceGroup\"]\n    service = \"\"\n\n    # source - (Optional) List of sources. Null will be treated as any. [Allowed target types: \"IPSet\", \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"MACSet\" (depending on the section type)]\n    source = \"\"\n\n    # sources_excluded - (Optional) Negation of the source.\n    sources_excluded = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the firewall_section.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n    # \"is_default\" - A boolean flag which reflects whether a firewall section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.\n}",
        "description": "This resource provides a way to configure a firewall section on the NSX manager. A firewall section is a collection of firewall rules that are grouped together.",
        "prefix": "nsxt-resource-firewall-section"
    },
    "nsxt-resource-ip-set": {
        "body": "resource \"nsxt_ip_set\" \"$1\" {\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this ip_set.\n    tag = \"\"\n\n    # ip_addresses - (Optional) IP addresses.\n    ip_addresses = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the ip_set.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resources provides a way to configure an IP set in NSX. An IP set is a collection of IP addresses. It is often used in the configuration of the NSX firewall.",
        "prefix": "nsxt-resource-ip-set"
    },
    "nsxt-resource-logical-port": {
        "body": "resource \"nsxt_logical_port\" \"$1\" {\n    # logical_switch_id - (Required) Logical switch ID for the logical port.\n    logical_switch_id = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # admin_state - (Optional) Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n    admin_state = \"\"\n\n    # switching_profile_id - (Optional) List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n    switching_profile_id = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this logical port.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a resource to configure a logical port on a logical switch in the NSX system. Like physical switches a logical switch can have one or more ports which can be connected to virtual machines or logical routers.",
        "prefix": "nsxt-resource-logical-port"
    },
    "nsxt-resource-logical-router-downlink-port": {
        "body": "resource \"nsxt_logical_router_downlink_port\" \"$1\" {\n    # ip_address - (Required) Logical router port subnet (ip_address / prefix length)\n    ip_address = \"\"\n\n    # linked_logical_switch_port_id - (Required) Identifier for port on logical switch to connect to\n    linked_logical_switch_port_id = \"\"\n\n    # logical_router_id - (Required) Identifier for logical Tier-1 router on which this port is created\n    logical_router_id = \"\"\n\n    # mac_address - (Optional) Mac Address\n    mac_address = \"\"\n\n    # urpf_mode - (Optional) Unicast Reverse Path Forwarding mode\n    urpf_mode = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of the resource.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this port.\n    tag = \"\"\n\n    # service_binding - (Optional) A list of services for this port\n    service_binding = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a means to define a downlink port on a logical router to connect a logical router to a logical switch. The result of this is to provide a default gateway to virtual machines running on the logical switch.",
        "prefix": "nsxt-resource-logical-router-downlink-port"
    },
    "nsxt-resource-logical-router-link-port-on-tier0": {
        "body": "resource \"nsxt_logical_router_link_port_on_tier0\" \"$1\" {\n    # logical_router_id - (Required) Identifier for logical Tier0 router on which this port is created.\n    logical_router_id = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of the resource.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this port.\n    tag = \"\"\n\n    # service_binding - (Optional) A list of services for this port\n    service_binding = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"linked_logical_switch_port_id\" - Identifier for port on logical router to connect to.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides the ability to configure a logical router link port on a tier 0 logical router. This port can then be used to connect the tier 0 logical router to another logical router.",
        "prefix": "nsxt-resource-logical-router-link-port-on-tier0"
    },
    "nsxt-resource-logical-router-link-port-on-tier1": {
        "body": "resource \"nsxt_logical_router_link_port_on_tier1\" \"$1\" {\n    # linked_logical_switch_port_id - (Required) Identifier for port on logical Tier-0 router to connect to.\n    linked_logical_switch_port_id = \"\"\n\n    # logical_router_id - (Required) Identifier for logical tier-1 router on which this port is created.\n    logical_router_id = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of the resource.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this port.\n    tag = \"\"\n\n    # service_binding - (Optional) A list of services for this port\n    service_binding = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides the ability to configure a logical router link port on a tier 1 logical router. This port can then be used to connect the tier 1 logical router to another logical router.",
        "prefix": "nsxt-resource-logical-router-link-port-on-tier1"
    },
    "nsxt-resource-logical-switch": {
        "body": "resource \"nsxt_logical_switch\" \"$1\" {\n    # transport_zone_id - (Required) Transport Zone ID for the logical switch.\n    transport_zone_id = \"\"\n\n    # admin_state - (Optional) Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n    admin_state = \"\"\n\n    # replication_mode - (Optional) Replication mode of the Logical Switch. Accepted values - 'MTEP' (Hierarchical Two-Tier replication) and 'SOURCE' (Head Replication), with 'MTEP' being the default value. Applies to overlay logical switches.\n    replication_mode = \"\"\n\n    # switching_profile_id - (Optional) List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n    switching_profile_id = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of the resource.\n    description = \"\"\n\n    # ip_pool_id - (Optional) Ip Pool ID to be associated with the logical switch.\n    ip_pool_id = \"\"\n\n    # mac_pool_id - (Optional) Mac Pool ID to be associated with the logical switch.\n    mac_pool_id = \"\"\n\n    # vlan - (Optional) Vlan for vlan logical switch. If not specified, this switch is overlay logical switch.\n    vlan = \"\"\n\n    # vni - (Optional) Vni for the logical switch.\n    vni = \"\"\n\n    # address_binding - (Optional) List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n    address_binding = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this logical switch.\n    tag = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical switch.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a method to create a logical switch in NSX. Virtual machines can then be connected to the appropriate logical switch for the desired topology and network connectivity.",
        "prefix": "nsxt-resource-logical-switch"
    },
    "nsxt-resource-logical-tier1-router": {
        "body": "resource \"router\" \"$1\" {\n    # edge_cluster_id - (Optional) Edge Cluster ID for the logical Tier1 router.\n    edge_cluster_id = \"\"\n\n    # display_name - (Optional) Display name, defaults to ID if not set.\n    display_name = \"\"\n\n    # description - (Optional) Description of the resource.\n    description = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this logical Tier1 router.\n    tag = \"\"\n\n    # failover_mode - (Optional) This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Note - It can be specified if and only if logical router is ACTIVE_STANDBY and NON_PREEMPTIVE mode is supported only for a Tier1 logical router. For ACTIVE_ACTIVE logical routers, this field must not be populated\n    failover_mode = \"\"\n\n    # enable_router_advertisement - (Optional) Enable the router advertisement\n    enable_router_advertisement = \"\"\n\n    # advertise_connected_routes - (Optional) Enable the router advertisement for all NSX connected routes\n    advertise_connected_routes = \"\"\n\n    # advertise_static_routes - (Optional) Enable the router advertisement for static routes\n    advertise_static_routes = \"\"\n\n    # advertise_nat_routes - (Optional) Enable the router advertisement for NAT routes\n    advertise_nat_routes = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the logical Tier1 router.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n    # \"advertise_config_revision\" - Indicates current revision number of the advertisement configuration object as seen by NSX-T API server. This attribute can be useful for debugging.\n    # \"firewall_sections\" - (Optional) The list of firewall sections for this router\n}",
        "description": "This resource provides a method for the management of a tier 1 logical router. A tier 1 logical router is often used for tenants, users and applications. There can be many tier 1 logical routers connected to a common tier 0 provider router.",
        "prefix": "nsxt-resource-logical-tier1-router"
    },
    "nsxt-resource-nat-rule": {
        "body": "resource \"nsxt_nat_rule\" \"$1\" {\n    # action - (Required) NAT rule action type. Valid actions are: SNAT, DNAT, NO_NAT and REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, and can NOT be supported when the logical router is running at active-active HA mode. The REFLEXIVE action is stateless. The NO_NAT action has no translated_fields, only match fields.\n    action = \"\"\n\n    # logical_router_id - (Required) ID of the logical router.\n    logical_router_id = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this NAT rule.\n    tag = \"\"\n\n    # enabled - (Optional) enable/disable the rule.\n    enabled = \"\"\n\n    # logging - (Optional) enable/disable the logging of rule.\n    logging = \"\"\n\n    # match_destination_network - (Optional) IP Address | CIDR | (null implies Any).\n    match_destination_network = \"\"\n\n    # match_source_network - (Optional) IP Address | CIDR | (null implies Any).\n    match_source_network = \"\"\n\n    # nat_pass - (Optional) Enable/disable to bypass following firewall stage. The default is true, meaning that the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted.\n    nat_pass = \"\"\n\n    # translated_network - (Optional) IP Address | IP Range | CIDR. For DNAT rules only a single ip is supported.\n    translated_network = \"\"\n\n    # translated_ports - (Optional) port number or port range. DNAT only.\n    translated_ports = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the nat_rule.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n    # \"rule_priority\" - The priority of the rule which is ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined.\n}",
        "description": "This resource provides a means to configure a NAT rule in NSX. NAT provides network address translation between one IP address space and another IP address space. NAT rules can be destination NAT or source NAT rules.",
        "prefix": "nsxt-resource-nat-rule"
    },
    "nsxt-resource-ns-group": {
        "body": "resource \"nsxt_ns_group\" \"$1\" {\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this NS group.\n    tag = \"\"\n\n    # member - (Optional) Reference to the direct/static members of the NSGroup. Can be ID based expressions only. VirtualMachine cannot be added as a static member. target_type can be: NSGroup, IPSet, LogicalPort, LogicalSwitch, MACSet\n    member = \"\"\n\n    # membership_criteria - (Optional) List of tag or ID expressions which define the membership criteria for this NSGroup. An object must satisfy at least one of these expressions to qualify as a member of this group.\n    membership_criteria = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the ns_group.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n}",
        "description": "This resource provides a method to create and manage a network and security (NS) group in NSX. A NS group is used to group other objects into collections for application of other settings.",
        "prefix": "nsxt-resource-ns-group"
    },
    "nsxt-resource-static-route": {
        "body": "resource \"nsxt_static_route\" \"$1\" {\n    # next_hop - (Required) List of Next Hops, each with those arguments:\n    next_hop = \"\"\n\n    # network - (Required) CIDR.\n    network = \"\"\n\n    # description - (Optional) Description of this resource.\n    description = \"\"\n\n    # display_name - (Optional) The display name of this resource. Defaults to ID if not set.\n    display_name = \"\"\n\n    # tag - (Optional) A list of scope + tag pairs to associate with this static route.\n    tag = \"\"\n\n    # logical_router_id - (Optional) Logical router id.\n    logical_router_id = \"\"\n\n    # administrative_distance - (Optional) Administrative Distance for the next hop IP.\n    administrative_distance = \"\"\n\n    # ip_address - (Optional) Next Hop IP.\n    ip_address = \"\"\n\n    # logical_router_port_id - (Optional) Reference of logical router port to be used for next hop.\n    logical_router_port_id = \"\"\n\n    # Exported Attributes\n    # \"id\" - ID of the static_route.\n    # \"revision\" - Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n    # \"next_hop\" additional arguments:\n    # \"bfd_enabled\" - Status of bfd for this next hop where bfd_enabled = true indicate bfd is enabled for this next hop and bfd_enabled = false indicate bfd peer is disabled or not configured for this next hop.\n    # \"blackhole_action\" - Action to be taken on matching packets for NULL routes.\n}",
        "description": "This resource provides a means to configure static routes in NSX to determine where IP traffic is routed.",
        "prefix": "nsxt-resource-static-route"
    },
    "nsxt-resource-vm-tags": {
        "body": "resource \"nsxt_vm_tags\" \"$1\" {\n    # tag - (Required) A list of scope + tag pairs to associate with this VM.\n    tag = \"\"\n\n    # instance_id - (Required) BIOS Id of the Virtual Machine.\n    instance_id = \"\"\n\n    # Exported Attributes\n}",
        "description": "  This resource provides a means to configure tags that are applied to objects such as virtual machines. A virtual machine is not directly managed by NSX however, NSX allows attachment of tags to a virtual machine. This tagging enables tag based grouping of objects. Deletion of `nsxt_vm_tags` resource will remove all tags from the virtual machine and is equivalent to update operation with empty tag set.",
        "prefix": "nsxt-resource-vm-tags"
    }
}