{
    "github-datasource-team": {
        "body": "data \"github_team\" \"$1\" {\n    # slug - (Required) The team slug.\n    slug = \"\"\n\n    # Exported Attributes\n    # \"id\" - the ID of the team.\n    # \"name\" - the team's full name.\n    # \"description\" - the team's description.\n    # \"privacy\" - the team's privacy type.\n    # \"permission\" - the team's permission level.\n    # \"members\" - List of team members\n}",
        "description": "Use this data source to retrieve information about a Github team.",
        "prefix": "github-datasource-team"
    },
    "github-datasource-user": {
        "body": "data \"github_user\" \"$1\" {\n    # username - (Required) The username.\n    username = \"\"\n\n    # Exported Attributes\n    # \"login\" - the user's login.\n    # \"avatar_url\" - the user's avatar URL.\n    # \"gravatar_id\" - the user's gravatar ID.\n    # \"site_admin\" - whether the user is a Github admin.\n    # \"name\" - the user's full name.\n    # \"company\" - the user's company name.\n    # \"blog\" - the user's blog location.\n    # \"location\" - the user's location.\n    # \"email\" - the user's email.\n    # \"gpg_keys\" - list of user's GPG keys\n    # \"ssh_keys\" - list of user's SSH keys\n    # \"bio\" - the user's bio.\n    # \"public_repos\" - the number of public repositories.\n    # \"public_gists\" - the number of public gists.\n    # \"followers\" - the number of followers.\n    # \"following\" - the number of following users.\n    # \"created_at\" - the creation date.\n    # \"updated_at\" - the update date.\n}",
        "description": "Use this data source to retrieve information about a Github user.",
        "prefix": "github-datasource-user"
    },
    "github-resource-branch-protection": {
        "body": "resource \"github_branch_protection\" \"$1\" {\n    # branch - (Required) The Git branch to protect.\n    branch = \"\"\n\n    # repository - (Required) The GitHub repository name.\n    repository = \"\"\n\n    # enforce_admins - (Optional) Boolean, setting this to `true` enforces status checks for repository administrators.\n    enforce_admins = \"\"\n\n    # required_status_checks - (Optional) Enforce restrictions for required status checks. See [Required Status Checks](#required-status-checks) below for details.\n    required_status_checks = \"\"\n\n    # required_pull_request_reviews - (Optional) Enforce restrictions for pull request reviews. See [Required Pull Request Reviews](#required-pull-request-reviews) below for details.\n    required_pull_request_reviews = \"\"\n\n    # restrictions - (Optional) Enforce restrictions for the users and teams that may push to the branch. See [Restrictions](#restrictions) below for details.\n    restrictions = \"\"\n\n    # Exported Attributes\n}",
        "description": "Protects a GitHub branch. This resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users and teams, can also be configured.",
        "prefix": "github-resource-branch-protection"
    },
    "github-resource-issue-label": {
        "body": "resource \"github_issue_label\" \"$1\" {\n    # color - (Required) A 6 character hex code, **without the leading #**, identifying the color of the label.\n    color = \"\"\n\n    # name - (Required) The name of the label.\n    name = \"\"\n\n    # repository - (Required) The GitHub repository\n    repository = \"\"\n\n    # url - (Optional) (Computed) The URL to the issue label\n    url = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a GitHub issue label resource. This resource allows you to create and manage issue labels within your\nGithub organization. Issue labels are keyed off of their \"name\", so pre-existing issue labels result\nin a 422 HTTP error if they exist outside of Terraform. Normally this would not\nbe an issue, except new repositories are created with a \"default\" set of labels,\nand those labels easily conflict with custom ones. This resource will first check if the label exists, and then issue an update,\notherwise it will create.",
        "prefix": "github-resource-issue-label"
    },
    "github-resource-membership": {
        "body": "resource \"github_membership\" \"$1\" {\n    # username - (Required) The user to add to the organization.\n    username = \"\"\n\n    # role - (Optional) The role of the user within the organization.\n    role = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a GitHub membership resource. This resource allows you to add/remove users from your organization. When applied,\nan invitation will be sent to the user to become part of the organization. When\ndestroyed, either the invitation will be cancelled or the user will be removed.",
        "prefix": "github-resource-membership"
    },
    "github-resource-organization-webhook": {
        "body": "resource \"github_organization_webhook\" \"$1\" {\n    # configuration - (Required) key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n    configuration = \"\"\n\n    # events - (Required) A list of events which should trigger the webhook. Defaults to `[\"push\"]`. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n    events = \"\"\n\n    # name - (Required) The type of the webhook. See a list of [available hooks](https://api.github.com/hooks).\n    name = \"\"\n\n    # active - (Optional) Indicate of the webhook should receive events. Defaults to `true`.\n    active = \"\"\n\n    # Exported Attributes\n    # \"url\" - URL of the webhook\n    # \"active\" - (Optional) Indicate of the webhook should receive events. Defaults to \"true\".\n}",
        "description": "This resource allows you to create and manage webhooks for Github organization.",
        "prefix": "github-resource-organization-webhook"
    },
    "github-resource-repository": {
        "body": "resource \"github_repository\" \"$1\" {\n    # name - (Required) The name of the repository.\n    name = \"\"\n\n    # description - (Optional) A description of the repository.\n    description = \"\"\n\n    # homepage_url - (Optional) URL of a page describing the project.\n    homepage_url = \"\"\n\n    # private - (Optional) Set to `true` to create a private repository. Repositories are created as public (e.g. open source) by default.\n    private = \"\"\n\n    # has_issues - (Optional) Set to `true` to enable the Github Issues features on the repository.\n    has_issues = \"\"\n\n    # has_wiki - (Optional) Set to `true` to enable the Github Wiki features on the repository.\n    has_wiki = \"\"\n\n    # allow_merge_commit - (Optional) Set to `false` to disable merge commits on the repository.\n    allow_merge_commit = \"\"\n\n    # allow_squash_merge - (Optional) Set to `false` to disable squash merges on the repository.\n    allow_squash_merge = \"\"\n\n    # allow_rebase_merge - (Optional) Set to `false` to disable rebase merges on the repository.\n    allow_rebase_merge = \"\"\n\n    # has_downloads - (Optional) Set to `true` to enable the (deprecated) downloads features on the repository.\n    has_downloads = \"\"\n\n    # auto_init - (Optional) Meaningful only during create; set to `true` to produce an initial commit in the repository.\n    auto_init = \"\"\n\n    # gitignore_template - (Optional) Meaningful only during create, will be ignored after repository creation. Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n    gitignore_template = \"\"\n\n    # license_template - (Optional) Meaningful only during create, will be ignored after repository creation. Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mozilla\".\n    license_template = \"\"\n\n    # default_branch - (Optional) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created, and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the initial repository creation and create the target branch inside of the repository prior to setting this attribute.\n    default_branch = \"\"\n\n    # Exported Attributes\n    # \"full_name\" - A string of the form \"orgname/reponame\".\n    # \"ssh_clone_url\" - URL that can be provided to \"git clone\" to clone the repository via SSH.\n    # \"http_clone_url\" - URL that can be provided to \"git clone\" to clone the repository via HTTPS.\n    # \"git_clone_url\" - URL that can be provided to \"git clone\" to clone the repository anonymously via the git protocol.\n    # \"svn_url\" - URL that can be provided to \"svn checkout\" to check out the repository via Github's Subversion protocol emulation.\n}",
        "description": "This resource allows you to create and manage repositories within your\nGithub organization. This resource cannot currently be used to manage *personal* repositories,\noutside of organizations.",
        "prefix": "github-resource-repository"
    },
    "github-resource-repository-collaborator": {
        "body": "resource \"github_repository_collaborator\" \"$1\" {\n    # username - (Required) The user to add to the repository as a collaborator.\n    username = \"\"\n\n    # repository - (Required) The GitHub repository\n    repository = \"\"\n\n    # permission - (Optional) The permission of the outside collaborator for the repository.\n    permission = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a GitHub repository collaborator resource. This resource allows you to add/remove collaborators from repositories in your\norganization. Collaborators can have explicit (and differing levels of) read,\nwrite, or administrator access to specific repositories in your organization,\nwithout giving the user full organization membership. When applied, an invitation will be sent to the user to become a collaborator\non a repository. When destroyed, either the invitation will be cancelled or the\ncollaborator will be removed from the repository. Further documentation on GitHub collaborators: [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)  [Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/) ",
        "prefix": "github-resource-repository-collaborator"
    },
    "github-resource-repository-deploy-key": {
        "body": "resource \"github_repository_deploy_key\" \"$1\" {\n    # title - (Required) A title.\n    title = \"\"\n\n    # repository - (Required) Name of the Github repository.\n    repository = \"\"\n\n    # read_only - (Required) A boolean qualifying the key to be either read only or read/write.\n    read_only = \"\"\n\n    # key - (Required) A ssh key.\n    key = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a GitHub repository deploy key resource. A deploy key is an SSH key that is stored on your server and grants\naccess to a single GitHub repository. This key is attached directly to the repository instead of to a personal user\naccount. This resource allows you to add/remove repository deploy keys. Further documentation on GitHub repository deploy keys: [About deploy keys](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys) ",
        "prefix": "github-resource-repository-deploy-key"
    },
    "github-resource-repository-webhook": {
        "body": "resource \"github_repository_webhook\" \"$1\" {\n    # configuration - (Required) key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n    configuration = \"\"\n\n    # events - (Required) A list of events which should trigger the webhook. Defaults to `[\"push\"]`. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n    events = \"\"\n\n    # repository - (Required) The repository of the webhook.\n    repository = \"\"\n\n    # name - (Required) The type of the webhook. See a list of [available hooks](https://api.github.com/hooks).\n    name = \"\"\n\n    # active - (Optional) Indicate of the webhook should receive events. Defaults to `true`.\n    active = \"\"\n\n    # Exported Attributes\n    # \"url\" - URL of the webhook\n    # \"active\" - (Optional) Indicate of the webhook should receive events. Defaults to \"true\".\n}",
        "description": "This resource allows you to create and manage webhooks for repositories within your\nGithub organization. This resource cannot currently be used to manage webhooks for *personal* repositories,\noutside of organizations.",
        "prefix": "github-resource-repository-webhook"
    },
    "github-resource-team": {
        "body": "resource \"github_team\" \"$1\" {\n    # name - (Required) The name of the team.\n    name = \"\"\n\n    # description - (Optional) A description of the team.\n    description = \"\"\n\n    # privacy - (Optional) The level of privacy for the team. Must be one of `secret` or `closed`.\n    privacy = \"\"\n\n    # ldan_dn - (Optional) The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise.\n    ldan_dn = \"\"\n\n    # Exported Attributes\n    # \"id\" - The ID of the created team.\n}",
        "description": "Provides a GitHub team resource. This resource allows you to add/remove teams from your organization. When applied,\na new team will be created. When destroyed, that team will be removed.",
        "prefix": "github-resource-team"
    },
    "github-resource-team-membership": {
        "body": "resource \"github_team_membership\" \"$1\" {\n    # username - (Required) The user to add to the team.\n    username = \"\"\n\n    # team_id - (Required) The GitHub team id\n    team_id = \"\"\n\n    # role - (Optional) The role of the user within the team.\n    role = \"\"\n\n    # Exported Attributes\n}",
        "description": "Provides a GitHub team membership resource. This resource allows you to add/remove users from teams in your organization. When applied,\nthe user will be added to the team. If the user hasn't accepted their invitation to the\norganization, they won't be part of the team until they do. When\ndestroyed, the user will be removed from the team.",
        "prefix": "github-resource-team-membership"
    },
    "github-resource-team-repository": {
        "body": "resource \"github_team_repository\" \"$1\" {\n    # repository - (Required) The repository to add to the team.\n    repository = \"\"\n\n    # team_id - (Required) The GitHub team id\n    team_id = \"\"\n\n    # permission - (Optional) The permissions of team members regarding the repository.\n    permission = \"\"\n\n    # Exported Attributes\n}",
        "description": "This resource manages relationships between teams and repositories\nin your Github organization. Creating this resource grants a particular team permissions on a\nparticular repository. The repository and the team must both belong to the same organization\non Github. This resource does not actually *create* any repositories;\nto do that, see [`github_repository`](repository.html).",
        "prefix": "github-resource-team-repository"
    }
}