{
    "docker-datasource-registry-image": {
        "body": "data \"docker_registry_image\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker image, including any tags. e.g. `alpine:latest`\n    name = \"\"\n\n    # Exported Attributes\n    # \"sha256_digest\" (string) - The content digest of the image, as stored on the registry.\n}",
        "description": "Reads the image metadata from a Docker Registry. Used in conjunction with the\n[docker\\_image](/docs/providers/docker/r/image.html) resource to keep an image up\nto date on the latest available version of the tag.",
        "prefix": "docker-datasource-registry-image"
    },
    "docker-resource-config": {
        "body": "resource \"docker_config\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker config.\n    name = \"\"\n\n    # data - (Optional) (Required, string) The base64 encoded data of the config.\n    data = \"\"\n\n    # Exported Attributes\n    # \"id\" (string)\n}",
        "description": "Manages the configuration of a Docker service in a swarm.",
        "prefix": "docker-resource-config"
    },
    "docker-resource-container": {
        "body": "resource \"docker_container\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker container.\n    name = \"\"\n\n    # image - (Optional) (Required, string) The ID of the image to back this container. The easiest way to get this value is to use the `docker_image` resource as is shown in the example above.\n    image = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # entrypoint - (Optional) (Optional, list of strings) The command to use as the\n    entrypoint = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # user - (Optional) (Optional, string) User used for run the first process. Format is\n    user = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # dns - (Optional) (Optional, set of strings) Set of DNS servers.\n    dns = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # dns_opts - (Optional) (Optional, set of strings) Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.\n    dns_opts = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # dns_search - (Optional) (Optional, set of strings) Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.\n    dns_search = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # env - (Optional) (Optional, set of strings) Environment variables to set.\n    env = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # labels - (Optional) (Optional, map of strings) Key/value pairs to set as labels on the\n    labels = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # links - (Optional) (Optional, set of strings) Set of links for link based\n    links = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # hostname - (Optional) (Optional, string) Hostname of the container.\n    hostname = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # domainname - (Optional) (Optional, string) Domain name of the container.\n    domainname = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # restart - (Optional) (Optional, string) The restart policy for the container. Must be\n    restart = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # max_retry_count - (Optional) (Optional, int) The maximum amount of times to an attempt\n    max_retry_count = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # rm - (Optional) (Optional, bool) If true, then the container will be automatically removed after his execution. Terraform\n    rm = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # start - (Optional) (Optional, bool) If true, then the Docker container will be\n    start = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # attach - (Optional) (Optional, bool) If true attach to the container after its creation and waits the end of his execution.\n    attach = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # logs - (Optional) (Optional, bool) Save the container logs (`attach` must be enabled).\n    logs = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # must_run - (Optional) (Optional, bool) If true, then the Docker container will be\n    must_run = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # capabilities - (Optional) (Optional, block) See [Capabilities](#capabilities) below for details.\n    capabilities = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # ports - (Optional) (Optional, block) See [Ports](#ports) below for details.\n    ports = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # host - (Optional) (Optional, block) See [Extra Hosts](#extra_hosts) below for\n    host = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # privileged - (Optional) (Optional, bool) Run container in privileged mode.\n    privileged = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # devices - (Optional) (Optional, bool) See [Devices](#devices) below for details.\n    devices = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # publish_all_ports - (Optional) (Optional, bool) Publish all ports of the container.\n    publish_all_ports = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # volumes - (Optional) (Optional, block) See [Volumes](#volumes) below for details.\n    volumes = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # memory - (Optional) (Optional, int) The memory limit for the container in MBs.\n    memory = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # memory_swap - (Optional) (Optional, int) The total memory limit (memory + swap) for the\n    memory_swap = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # cpu_shares - (Optional) (Optional, int) CPU shares (relative weight) for the container.\n    cpu_shares = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # cpu_set - (Optional) (Optional, string) A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.\n    cpu_set = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # log_driver - (Optional) (Optional, string) The logging driver to use for the container.\n    log_driver = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # log_opts - (Optional) (Optional, map of strings) Key/value pairs to use as options for\n    log_opts = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # network_alias - (Optional) (Optional, set of strings) Network aliases of the container for user-defined networks only. *Deprecated:* use `networks_advanced` instead.\n    network_alias = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # network_mode - (Optional) (Optional, string) Network mode of the container.\n    network_mode = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # networks - (Optional) (Optional, set of strings) Id of the networks in which the\n    networks = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # networks_advanced - (Optional) (Optional, block) See [Networks Advanced](#networks_advanced) below for details.\n    networks_advanced = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # destroy_grace_seconds - (Optional) (Optional, int) If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.\n    destroy_grace_seconds = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # upload - (Optional) (Optional, block) See [File Upload](#upload) below for details.\n    upload = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # ulimit - (Optional) (Optional, block) See [Ulimits](#ulimits) below for\n    ulimit = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # pid_mode - (Optional) (Optional, string) The PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.\n    pid_mode = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # userns_mode - (Optional) (Optional, string) Sets the usernamespace mode for the container when usernamespace remapping option is enabled.\n    userns_mode = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # healthcheck - (Optional) (Optional, block) See [Healthcheck](#healthcheck) below for details.\n    healthcheck = \"\"\n\n    # command - (Optional) (Optional, list of strings) The command to use to start the   container. For example, to run `/usr/bin/myprogram -f baz.conf` set the   command to be `[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]`.\n    command = \"\"\n\n    # Exported Attributes\n    # \"exit_code\" - The exit code of the container if its execution is done (\"must_run\" must be disabled).\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"container_logs\" - The logs of the container if its execution is done (\"attach\" must be disabled).\n    # \"network_data\" - (Map of a block) The IP addresses of the container on each\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"ip_address\" - The IP address of the container.\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"ip_prefix_length\" - The IP prefix length of the container.\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"gateway\" - The network gateway of the container.\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"bridge\" - The network bridge of the container as read from its NetworkSettings.\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"ip_address\" - *Deprecated:* Use \"network_data\" instead. The IP address of the container's first network it.\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"ip_prefix_length\" - *Deprecated:* Use \"network_data\" instead. The IP prefix length of the container as read from its\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n    # \"gateway\" - *Deprecated:* Use \"network_data\" instead. The network gateway of the container as read from its\n    # \"command\" - (Optional, list of strings) The command to use to start the   container. For example, to run \"/usr/bin/myprogram -f baz.conf\" set the   command to be \"[\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"]\".\n}",
        "description": "Manages the lifecycle of a Docker container.",
        "prefix": "docker-resource-container"
    },
    "docker-resource-image": {
        "body": "resource \"docker_image\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker image, including any tags or SHA256 repo digests.\n    name = \"\"\n\n    # keep_locally - (Optional) (Optional, boolean) If true, then the Docker image won't be\n    keep_locally = \"\"\n\n    # pull_triggers - (Optional) (Optional, list of strings) List of values which cause an\n    pull_triggers = \"\"\n\n    # pull_trigger - (Optional) **Deprecated**, use `pull_triggers` instead.\n    pull_trigger = \"\"\n\n    # Exported Attributes\n    # \"latest\" (string) - The ID of the image.\n}",
        "description": "Pulls a Docker image to a given Docker host from a Docker Registry. This resource will *not* pull new layers of the image automatically unless used in\nconjunction with [`docker_registry_image`](/docs/providers/docker/d/registry_image.html)\ndata source to update the `pull_triggers` field.",
        "prefix": "docker-resource-image"
    },
    "docker-resource-network": {
        "body": "resource \"docker_network\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker network.\n    name = \"\"\n\n    # labels - (Optional) (Optional, map of string/string key/value pairs) User-defined key/value metadata.\n    labels = \"\"\n\n    # check_duplicate - (Optional) (Optional, boolean) Requests daemon to check for networks\n    check_duplicate = \"\"\n\n    # driver - (Optional) (Optional, string) Name of the network driver to use. Defaults to\n    driver = \"\"\n\n    # bridge - (Optional) `bridge` driver.\n    bridge = \"\"\n\n    # options - (Optional) (Optional, map of strings) Network specific options to be used by\n    options = \"\"\n\n    # internal - (Optional) (Optional, boolean) Restrict external access to the network.\n    internal = \"\"\n\n    # attachable - (Optional) (Optional, boolean) Enable manual container attachment to the network.\n    attachable = \"\"\n\n    # ingress - (Optional) (Optional, boolean) Create swarm routing-mesh network.\n    ingress = \"\"\n\n    # ipam_driver - (Optional) (Optional, string) Driver used by the custom IP scheme of the\n    ipam_driver = \"\"\n\n    # ipam_config - (Optional) (Optional, block) See [IPAM config](#ipam_config) below for\n    ipam_config = \"\"\n\n    # Exported Attributes\n    # \"id\" (string)\n    # \"scope\" (string)\n}",
        "description": "Manages a Docker Network. This can be used alongside\n[docker\\_container](/docs/providers/docker/r/container.html)\nto create virtual networks within the docker environment.",
        "prefix": "docker-resource-network"
    },
    "docker-resource-secret": {
        "body": "resource \"docker_secret\" \"$1\" {\n    # name - (Optional) (Required, string) The name of the Docker secret.\n    name = \"\"\n\n    # data - (Optional) (Required, string) The base64 encoded data of the secret.\n    data = \"\"\n\n    # labels - (Optional) (Optional, map of string/string key/value pairs) User-defined key/value metadata.\n    labels = \"\"\n\n    # Exported Attributes\n    # \"id\" (string)\n}",
        "description": "Manages the secrets of a Docker service in a swarm.",
        "prefix": "docker-resource-secret"
    },
    "docker-resource-service": {
        "body": "resource \"docker_service\" \"$1\" {\n    # auth - (Optional) (Optional, block) See [Auth](#auth) below for details.\n    auth = \"\"\n\n    # name - (Optional) (Required, string) The name of the Docker service.\n    name = \"\"\n\n    # task_spec - (Optional) (Required, block) See [TaskSpec](#task-spec) below for details.\n    task_spec = \"\"\n\n    # mode - (Optional) (Optional, block) See [Mode](#mode) below for details.\n    mode = \"\"\n\n    # update_config - (Optional) (Optional, block) See [UpdateConfig](#update-rollback-config) below for details.\n    update_config = \"\"\n\n    # rollback_config - (Optional) (Optional, block) See [RollbackConfig](#update-rollback-config) below for details.\n    rollback_config = \"\"\n\n    # endpoint_spec - (Optional) (Optional, block) See [EndpointSpec](#endpoint-spec) below for details.\n    endpoint_spec = \"\"\n\n    # converge_config - (Optional) (Optional, block) See [Converge Config](#converge-config) below for details.\n    converge_config = \"\"\n\n    # Exported Attributes\n    # \"id\" (string)\n}",
        "description": "This resource manages the lifecycle of a Docker service. By default, the creation, update and delete of services are detached. With the [Converge Config](#convergeconfig) the behavior of the `docker cli` is imitated to guarantee that\nfor example, all tasks of a service are running or successfully updated or to inform `terraform` that a service could not\nbe updated and was successfully rolled back.",
        "prefix": "docker-resource-service"
    },
    "docker-resource-volume": {
        "body": "resource \"docker_volume\" \"$1\" {\n    # name - (Optional) (Optional, string) The name of the Docker volume (generated if not\n    name = \"\"\n\n    # labels - (Optional) (Optional, map of string/string key/value pairs) User-defined key/value metadata.\n    labels = \"\"\n\n    # driver - (Optional) (Optional, string) Driver type for the volume (defaults to local).\n    driver = \"\"\n\n    # driver_opts - (Optional) (Optional, map of strings) Options specific to the driver.\n    driver_opts = \"\"\n\n    # Exported Attributes\n    # \"mountpoint\" (string) - The mountpoint of the volume.\n}",
        "description": "Creates and destroys a volume in Docker. This can be used alongside\n[docker\\_container](/docs/providers/docker/r/container.html)\nto prepare volumes that can be shared across containers.",
        "prefix": "docker-resource-volume"
    }
}