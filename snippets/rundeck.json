{
    "rundeck-resource-job": {
        "body": "resource \"rundeck_job\" \"$1\" {\n    # type - (Required) The name of the plugin to execute.\n    type = \"\"\n\n    # name - (Required) The name of the job to execute. The target job must be in the same project as the current job.\n    name = \"\"\n\n    # name - (Required) Unique name that will be shown in the UI when entering values and used as a variable name for template substitutions.\n    name = \"\"\n\n    # command - (Required) Nested block defining one step in the job workflow. A job must have one or more commands. The structure of this nested block is described below.\n    command = \"\"\n\n    # project_name - (Required) The name of the project that this job should belong to.\n    project_name = \"\"\n\n    # description - (Required) A longer description of the job, describing the job in the Rundeck UI.\n    description = \"\"\n\n    # name - (Required) The name of the job, used to describe the job in the Rundeck UI.\n    name = \"\"\n\n    # group_name - (Optional) The name of a group within the project in which to place the job. Setting this creates collapsable subcategories within the Rundeck UI's project job index.\n    group_name = \"\"\n\n    # log_level - (Optional) The log level that Rundeck should use for this job. Defaults to \"INFO\".\n    log_level = \"\"\n\n    # allow_concurrent_executions - (Optional) Boolean defining whether two or more executions of this job can run concurrently. The default is `false`, meaning that jobs will only run sequentially.\n    allow_concurrent_executions = \"\"\n\n    # max_thread_count - (Optional) The maximum number of threads to use to execute this job, which controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that the nodes will be visited sequentially.\n    max_thread_count = \"\"\n\n    # continue_on_error - (Optional) Boolean defining whether Rundeck will continue to run subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution will stop and the execution will be considered to have failed.\n    continue_on_error = \"\"\n\n    # rank_attribute - (Optional) The name of the attribute that will be used to decide in which order the nodes will be visited while executing the job across multiple nodes.\n    rank_attribute = \"\"\n\n    # rank_order - (Optional) Keyword deciding which direction the nodes are sorted in terms of the chosen `rank_attribute`. May be either \"ascending\" (the default) or \"descending\".\n    rank_order = \"\"\n\n    # preserve_options_order - (Optional) Boolean controlling whether the configured options will be presented in their configuration order when shown in the Rundeck UI. The default is `false`, which means that the options will be displayed in alphabetical order by name.\n    preserve_options_order = \"\"\n\n    # command_ordering_strategy - (Optional) The name of the strategy used to describe how to traverse the matrix of nodes and commands. The default is \"node-first\", meaning that all commands will be executed on a single node before moving on to the next. May also be set to \"step-first\", meaning that a single step will be executed across all nodes before moving on to the next step.\n    command_ordering_strategy = \"\"\n\n    # node_filter_query - (Optional) A query string using [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax) that defines which subset of the project's nodes will be used to execute this job.\n    node_filter_query = \"\"\n\n    # node_filter_exclude_precedence - (Optional) Boolean controlling a deprecated Rundeck feature that controls whether node exclusions take priority over inclusions.\n    node_filter_exclude_precedence = \"\"\n\n    # option - (Optional) Nested block defining an option a user may set when executing this job. A job may have any number of options. The structure of this nested block is described below.\n    option = \"\"\n\n    # option - (Optional) `option` blocks have the following structure:\n    option = \"\"\n\n    # default_value - (Optional) A default value for the option.\n    default_value = \"\"\n\n    # value_choices - (Optional) A list of strings giving a set of predefined values that the user may choose from when entering a value for the option.\n    value_choices = \"\"\n\n    # value_choices_url - (Optional) Can be used instead of `value_choices` to cause Rundeck to obtain a list of choices dynamically by fetching this URL.\n    value_choices_url = \"\"\n\n    # require_predefined_choice - (Optional) Boolean controlling whether the user is allowed to enter values not included in the predefined set of choices (`false`, the default) or whether a predefined choice is required (`true`).\n    require_predefined_choice = \"\"\n\n    # validation_regex - (Optional) A regular expression that a provided value must match in order to be accepted.\n    validation_regex = \"\"\n\n    # description - (Optional) A longer description of the option to be shown in the UI.\n    description = \"\"\n\n    # required - (Optional) Boolean defining whether the user must provide a value for the option. Defaults to `false`.\n    required = \"\"\n\n    # allow_multiple_values - (Optional) Boolean defining whether the user may select multiple values from the set of predefined values. Defaults to `false`, meaning that the user may choose only one value.\n    allow_multiple_values = \"\"\n\n    # multi_value_delimiter - (Optional) Delimiter used to join together multiple values into a single string when `allow_multiple_values` is set and the user chooses multiple values.\n    multi_value_delimiter = \"\"\n\n    # obscure_input - (Optional) Boolean controlling whether the value of this option should be obscured during entry and in execution logs. Defaults to `false`, but should be set to `true` when the requested value is a password, private key or any other secret value.\n    obscure_input = \"\"\n\n    # exposed_to_scripts - (Optional) Boolean controlling whether the value of this option is available to scripts executed by job commands. Defaults to `false`.\n    exposed_to_scripts = \"\"\n\n    # command - (Optional) `command` blocks must have any one of the following combinations of arguments as contents:\n    command = \"\"\n\n    # description - (Optional) gives a description to the command block.\n    description = \"\"\n\n    # shell_command - (Optional) `shell_command` gives a single shell command to execute on the nodes.\n    shell_command = \"\"\n\n    # inline_script - (Optional) `inline_script` gives a whole shell script, inline in the configuration, to execute on the nodes.\n    inline_script = \"\"\n\n    # script_file - (Optional) `script_file` and `script_file_args` together describe a script that is already pre-installed on the nodes which is to be executed.\n    script_file = \"\"\n\n    # group_name - (Optional) The name of the group that the target job belongs to, if any.\n    group_name = \"\"\n\n    # run_for_each_node - (Optional) Boolean controlling whether the job is run only once (`false`, the default) or whether it is run once for each node (`true`).\n    run_for_each_node = \"\"\n\n    # args - (Optional) A string giving the arguments to pass to the target job, using [Rundeck's job arguments syntax](http://rundeck.org/docs/manual/jobs.html#job-reference-step).\n    args = \"\"\n\n    # config - (Optional) Map of arbitrary configuration parameters for the selected plugin.\n    config = \"\"\n\n    # Exported Attributes\n    # \"id\" - A unique identifier for the job.\n    # \"config\": (Optional) Map of arbitrary configuration parameters for the selected plugin.\n}",
        "description": "The job resource allows Rundeck jobs to be managed by Terraform. In Rundeck a job is a particular\nnamed set of steps that can be executed against one or more of the nodes configured for its\nassociated project. Each job belongs to a project. A project can be created with the `rundeck_project` resource.",
        "prefix": "rundeck-resource-job"
    },
    "rundeck-resource-private-key": {
        "body": "resource \"rundeck_private_key\" \"$1\" {\n    # key_material - (Required) The private key material to store, serialized in any way that is accepted by OpenSSH.\n    key_material = \"\"\n\n    # path - (Required) The path within the key store where the key will be stored.\n    path = \"\"\n\n    # Exported Attributes\n}",
        "description": "The private key resource allows SSH private keys to be stored into Rundeck's key store.\nThe key store is where Rundeck keeps credentials that are needed to access the nodes on which\nit runs commands.",
        "prefix": "rundeck-resource-private-key"
    },
    "rundeck-resource-project": {
        "body": "resource \"rundeck_project\" \"$1\" {\n    # config - (Required) Map of arbitrary configuration properties for the selected resource model plugin.\n    config = \"\"\n\n    # type - (Required) The name of the resource model plugin to use.\n    type = \"\"\n\n    # resource_model_source - (Required) Nested block instructing Rundeck on how to determine the set of resources (nodes) for this project. The nested block structure is described below.\n    resource_model_source = \"\"\n\n    # name - (Required) The name of the project, used both in the UI and to uniquely identify the project. Must therefore be unique across a single Rundeck installation.\n    name = \"\"\n\n    # description - (Optional) A description of the project, to be displayed in the Rundeck UI. Defaults to \"Managed by Terraform\".\n    description = \"\"\n\n    # default_node_file_copier_plugin - (Optional) The name of a plugin to use to copy files onto nodes within this project. Defaults to `jsch-scp`, which uses the \"Secure Copy\" protocol to send files over SSH.\n    default_node_file_copier_plugin = \"\"\n\n    # default_node_executor_plugin - (Optional) The name of a plugin to use to run commands on nodes within this project. Defaults to `jsch-ssh`, which uses the SSH protocol to access the nodes.\n    default_node_executor_plugin = \"\"\n\n    # ssh_authentication_type - (Optional) When the SSH-based file copier and executor plugins are used, the type of SSH authentication to use. Defaults to `privateKey`.\n    ssh_authentication_type = \"\"\n\n    # ssh_key_storage_path - (Optional) When the SSH-based file copier and executor plugins are used, the location within Rundeck's key store where the SSH private key can be found. Private keys can be uploaded to rundeck using the `rundeck_private_key` resource.\n    ssh_key_storage_path = \"\"\n\n    # ssh_key_file_path - (Optional) Like `ssh_key_storage_path` except that the key is read from the Rundeck server's local filesystem, rather than from the key store.\n    ssh_key_file_path = \"\"\n\n    # extra_config - (Optional) Behind the scenes a Rundeck project is really an arbitrary set of key/value pairs. This map argument allows setting any configuration properties that aren't explicitly supported by the other arguments described above, but due to limitations of Terraform the key names must be written with slashes in place of dots. Do not use this argument to set properties that the above arguments set, or undefined behavior will result.\n    extra_config = \"\"\n\n    # resource_model_source - (Optional) `resource_model_source` blocks have the following nested arguments:\n    resource_model_source = \"\"\n\n    # Exported Attributes\n    # \"name\" - The unique name that identifies the project, as set in the arguments.\n    # \"config\" - (Required) Map of arbitrary configuration properties for the selected resource model plugin.\n    # \"ui_url\" - The URL of the index page for this project in the Rundeck UI.\n    # \"config\" - (Required) Map of arbitrary configuration properties for the selected resource model plugin.\n}",
        "description": "The project resource allows Rundeck projects to be managed by Terraform. In Rundeck a project\nis the container object for a set of jobs and the configuration for which servers those jobs\ncan be run on.",
        "prefix": "rundeck-resource-project"
    },
    "rundeck-resource-public-key": {
        "body": "resource \"rundeck_public_key\" \"$1\" {\n    # path - (Required) The path within the key store where the key will be stored. By convention this path name normally ends with \".pub\" and otherwise has the same name as the associated private key.\n    path = \"\"\n\n    # key_material - (Optional) The public key string to store, serialized in any way that is accepted by OpenSSH. If this is not included, ``key_material`` becomes an attribute that can be used to read the already-existing key material in the Rundeck store.\n    key_material = \"\"\n\n    # Exported Attributes\n    # \"url\" - The URL at which the key material can be retrieved from the key store by other clients.\n    # \"key_material\" - If \"key_material\" is omitted in the configuration, it becomes an attribute that exposes the key material already stored at the given \"path\".\n}",
        "description": "The public key resource allows SSH public keys to be stored into Rundeck's key store.\nThe key store is where Rundeck keeps credentials that are needed to access the nodes on which\nit runs commands. This resource also allows the retrieval of an existing public key from the store, so that it\nmay be used in the configuration of other resources such as ``aws_key_pair``.",
        "prefix": "rundeck-resource-public-key"
    }
}