{
    "template-datasource-cloudinit-config": {
        "body": "data \"cloudinit_multipart\" \"$1\" {\n    # content - (Required) Body content for the part.\n    content = \"\"\n\n    # part - (Required) A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n    part = \"\"\n\n    # gzip - (Optional) Specify whether or not to gzip the rendered output. Defaults to `true`.\n    gzip = \"\"\n\n    # filename - (Optional) A filename to report in the header for the part.\n    filename = \"\"\n\n    # content_type - (Optional) A MIME-style content type to report in the header for the part.\n    content_type = \"\"\n\n    # merge_type - (Optional) A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/topics/merging.html).\n    merge_type = \"\"\n\n    # Exported Attributes\n    # \"rendered\" - The final rendered multi-part cloud-init config.\n    # \"merge_type\" - (Optional) A value for the \"X-Merge-Type\" header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/topics/merging.html).\n}",
        "description": "Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)\nfor use with [Cloud-init](https://cloudinit.readthedocs.io/). Cloud-init is a commonly-used startup configuration utility for cloud compute\ninstances. It accepts configuration via provider-specific user data mechanisms,\nsuch as `user_data` for Amazon EC2 instances. Multipart MIME is one of the\ndata formats it accepts. For more information, see\n[User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)\nin the Cloud-init manual. This is not a generalized utility for producing multipart MIME messages. Its\nfeatureset is specialized for the features of cloud-init.",
        "prefix": "template-datasource-cloudinit-config"
    },
    "template-datasource-file": {
        "body": "data \"template_file\" \"$1\" {\n    # template - (Required) The contents of the template, as a string using [Terraform template syntax](/docs/configuration/expressions.html#string-templates). Use [the `file` function](/docs/configuration/functions/file.html) to load the template source from a separate file on disk.\n    template = \"\"\n\n    # vars - (Optional) Variables for interpolation within the template. Note that variables must all be primitives. Direct references to lists or maps will cause a validation error.\n    vars = \"\"\n\n    # Exported Attributes\n    # \"template\" - See Argument Reference above.\n    # \"vars\" - (Optional) Variables for interpolation within the template. Note that variables must all be primitives. Direct references to lists or maps will cause a validation error.\n    # \"vars\" - See Argument Reference above.\n    # \"vars\" - (Optional) Variables for interpolation within the template. Note that variables must all be primitives. Direct references to lists or maps will cause a validation error.\n    # \"rendered\" - The final rendered template.\n    # \"vars\" - (Optional) Variables for interpolation within the template. Note that variables must all be primitives. Direct references to lists or maps will cause a validation error.\n}",
        "description": "The `template_file` data source renders a template from a template string,\nwhich is usually loaded from an external file. ~> **Note** In Terraform 0.12 and later,\n[the `templatefile` function](/docs/configuration/functions/templatefile.html)\noffers a built-in mechanism for rendering a template from a file. Use that\nfunction instead, unless you are using Terraform 0.11 or earlier.",
        "prefix": "template-datasource-file"
    },
    "template-resource-dir": {
        "body": "resource \"template_dir\" \"$1\" {\n    # destination_dir - (Required) Path to the directory where the templated files will be written.\n    destination_dir = \"\"\n\n    # source_dir - (Required) Path to the directory where the files to template reside.\n    source_dir = \"\"\n\n    # vars - (Optional) Variables for interpolation within the template. Note that variables must all be primitives. Direct references to lists or maps will cause a validation error.\n    vars = \"\"\n\n    # Exported Attributes\n}",
        "description": "Renders a directory containing templates into a separate directory of\ncorresponding rendered files. `template_dir` is similar to [`template_file`](../d/file.html) but it walks\na given source directory and treats every file it encounters as a template,\nrendering it to a corresponding file in the destination directory. ~> **Note** When working with local files, Terraform will detect the resource\nas having been deleted each time a configuration is applied on a new machine\nwhere the destination dir is not present and will generate a diff to create\nit. This may cause \"noise\" in diffs in environments where configurations are\nroutinely applied by many different users or within automation systems.",
        "prefix": "template-resource-dir"
    }
}