{
    "kubernetes-data-source-service": {
        "body": "data \"kubernetes_service\" \"$1\" {\n    # metadata - (Required) Standard service's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A Service is an abstraction which defines a logical set of pods and a policy by which to access them - sometimes called a micro-service.\nThis data source allows you to pull data about such service.",
        "prefix": "kubernetes-data-source-service"
    },
    "kubernetes-data-source-storage-class": {
        "body": "data \"kubernetes_storage_class\" \"$1\" {\n    # parameters - (Optional) The parameters for the provisioner that creates volume of this storage class.\n    parameters = \"\"\n\n    # storage_provisioner - (Optional) Indicates the type of the provisioner this storage class represents\n    storage_provisioner = \"\"\n\n    # reclaim_policy - (Optional) Indicates the reclaim policy used.\n    reclaim_policy = \"\"\n\n    # volume_binding_mode - (Optional) Indicates when volume binding and dynamic provisioning should occur.\n    volume_binding_mode = \"\"\n\n    # Exported Attributes\n}",
        "description": "Storage class is the foundation of dynamic provisioning, allowing cluster administrators to define abstractions for the underlying storage platform. Read more at http://blog.kubernetes.io/2017/03/dynamic-provisioning-and-storage-classes-kubernetes.html",
        "prefix": "kubernetes-data-source-storage-class"
    },
    "kubernetes-resource-cluster-role-binding": {
        "body": "resource \"kubernetes_cluster_role_binding\" \"$1\" {\n    # subject - (Required) The Users, Groups, or ServiceAccounts to grand permissions to. For more info see [Kubernetes reference](https://kubernetes.io/docs/admin/authorization/rbac/#referring-to-subjects)\n    subject = \"\"\n\n    # role_ref - (Required) The ClusterRole to bind Subjects to. For more info see [Kubernetes reference](https://kubernetes.io/docs/admin/authorization/rbac/#rolebinding-and-clusterrolebinding)\n    role_ref = \"\"\n\n    # metadata - (Required) Standard kubernetes metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A ClusterRoleBinding may be used to grant permission at the cluster level and in all namespaces",
        "prefix": "kubernetes-resource-cluster-role-binding"
    },
    "kubernetes-resource-config-map": {
        "body": "resource \"kubernetes_config_map\" \"$1\" {\n    # metadata - (Required) Standard config map's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # data - (Optional) A map of the configuration data.\n    data = \"\"\n\n    # Exported Attributes\n}",
        "description": "The resource provides mechanisms to inject containers with configuration data while keeping containers agnostic of Kubernetes.\nConfig Map can be used to store fine-grained information like individual properties or coarse-grained information like entire config files or JSON blobs.",
        "prefix": "kubernetes-resource-config-map"
    },
    "kubernetes-resource-deployment": {
        "body": "resource \"kubernetes_deployment\" \"$1\" {\n    # spec - (Required) Spec defines the specification of the desired behavior of the deployment. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # metadata - (Required) Standard deployment's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A Deployment ensures that a specified number of pod \u201creplicas\u201d are running at any one time. In other words, a Deployment makes sure that a pod or homogeneous set of pods are always up and available. If there are too many pods, it will kill some. If there are too few, the Deployment will start more.",
        "prefix": "kubernetes-resource-deployment"
    },
    "kubernetes-resource-horizontal-pod-autoscaler": {
        "body": "resource \"kubernetes_horizontal_pod_autoscaler\" \"$1\" {\n    # spec - (Required) Behaviour of the autoscaler. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # metadata - (Required) Standard horizontal pod autoscaler's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "Horizontal Pod Autoscaler automatically scales the number of pods in a replication controller, deployment or replica set based on observed CPU utilization.",
        "prefix": "kubernetes-resource-horizontal-pod-autoscaler"
    },
    "kubernetes-resource-limit-range": {
        "body": "resource \"kubernetes_limit_range\" \"$1\" {\n    # metadata - (Required) Standard limit range's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # spec - (Optional) Spec defines the limits enforced. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # Exported Attributes\n}",
        "description": "Limit Range sets resource usage limits (e.g. memory, cpu, storage) for supported kinds of resources in a namespace. Read more in [the official docs](https://kubernetes.io/docs/tasks/configure-pod-container/apply-resource-quota-limit/#applying-default-resource-requests-and-limits).",
        "prefix": "kubernetes-resource-limit-range"
    },
    "kubernetes-resource-namespace": {
        "body": "resource \"kubernetes_namespace\" \"$1\" {\n    # metadata - (Required) Standard namespace's [metadata](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata).\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called namespaces.\nRead more about namespaces at [Kubernetes reference](https://kubernetes.io/docs/user-guide/namespaces)/",
        "prefix": "kubernetes-resource-namespace"
    },
    "kubernetes-resource-network-policy": {
        "body": "resource \"kubernetes_network_policy\" \"$1\" {\n    # metadata - (Required) Standard network policy's [metadata](https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata).\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "Kubernetes supports network policies to specificy of how groups of pods are allowed to communicate with each other and other network endpoints.\nNetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods.\nRead more about network policies at https://kubernetes.io/docs/concepts/services-networking/network-policies/",
        "prefix": "kubernetes-resource-network-policy"
    },
    "kubernetes-resource-persistent-volume-claim": {
        "body": "resource \"kubernetes_persistent_volume_claim\" \"$1\" {\n    # spec - (Required) Spec defines the desired characteristics of a volume requested by a pod author. For more info see [Kubernetes reference](http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims)\n    spec = \"\"\n\n    # metadata - (Required) Standard persistent volume claim's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # wait_until_bound - (Optional) Whether to wait for the claim to reach `Bound` state (to find volume in which to claim the space)\n    wait_until_bound = \"\"\n\n    # Exported Attributes\n}",
        "description": "This resource allows the user to request for and claim to a persistent volume.",
        "prefix": "kubernetes-resource-persistent-volume-claim"
    },
    "kubernetes-resource-persistent-volume-x": {
        "body": "resource \"kubernetes_persistent_volume\" \"$1\" {\n    # spec - (Required) Spec of the persistent volume owned by the cluster. See below.\n    spec = \"\"\n\n    # metadata - (Required) Standard persistent volume's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "The resource provides a piece of networked storage in the cluster provisioned by an administrator. It is a resource in the cluster just like a node is a cluster resource. Persistent Volumes have a lifecycle independent of any individual pod that uses the PV. For more info see [Kubernetes reference](https://kubernetes.io/docs/concepts/storage/persistent-volumes)/",
        "prefix": "kubernetes-resource-persistent-volume-x"
    },
    "kubernetes-resource-pod": {
        "body": "resource \"kubernetes_pod\" \"$1\" {\n    # spec - (Required) Spec of the pod owned by the cluster\n    spec = \"\"\n\n    # metadata - (Required) Standard pod's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A pod is a group of one or more containers, the shared storage for those containers, and options about how to run the containers. Pods are always co-located and co-scheduled, and run in a shared context. Read more at [Kubernetes reference](https://kubernetes.io/docs/concepts/workloads/pods/pod)/",
        "prefix": "kubernetes-resource-pod"
    },
    "kubernetes-resource-replication-controller": {
        "body": "resource \"kubernetes_replication_controller\" \"$1\" {\n    # spec - (Required) Spec defines the specification of the desired behavior of the replication controller. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # metadata - (Required) Standard replication controller's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A Replication Controller ensures that a specified number of pod \u201creplicas\u201d are running at any one time. In other words, a Replication Controller makes sure that a pod or homogeneous set of pods are always up and available. If there are too many pods, it will kill some. If there are too few, the Replication Controller will start more. ~> **WARNING:** In many cases it is recommended to create a Deployment instead of a Replication Controller.",
        "prefix": "kubernetes-resource-replication-controller"
    },
    "kubernetes-resource-resource-quota": {
        "body": "resource \"kubernetes_resource_quota\" \"$1\" {\n    # metadata - (Required) Standard resource quota's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # spec - (Optional) Spec defines the desired quota. [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # Exported Attributes\n}",
        "description": "A resource quota provides constraints that limit aggregate resource consumption per namespace. It can limit the quantity of objects that can be created in a namespace by type, as well as the total amount of compute resources that may be consumed by resources in that project.",
        "prefix": "kubernetes-resource-resource-quota"
    },
    "kubernetes-resource-role": {
        "body": "resource \"kubernetes_role\" \"$1\" {\n    # rule - (Required) List of rules that define the set of permissions for this role. For more info see [Kubernetes reference](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)\n    rule = \"\"\n\n    # metadata - (Required) Standard role's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A role contains rules that represent a set of permissions. Permissions are purely additive (there are no \u201cdeny\u201d rules).",
        "prefix": "kubernetes-resource-role"
    },
    "kubernetes-resource-role-binding": {
        "body": "resource \"kubernetes_role_binding\" \"$1\" {\n    # subject - (Required) The Users, Groups, or ServiceAccounts to grand permissions to. For more info see [Kubernetes reference](https://kubernetes.io/docs/admin/authorization/rbac/#referring-to-subjects)\n    subject = \"\"\n\n    # role_ref - (Required) The Role to bind Subjects to. For more info see [Kubernetes reference](https://kubernetes.io/docs/admin/authorization/rbac/#rolebinding-and-clusterrolebinding)\n    role_ref = \"\"\n\n    # metadata - (Required) Standard kubernetes metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A RoleBinding may be used to grant permission at the namespace level",
        "prefix": "kubernetes-resource-role-binding"
    },
    "kubernetes-resource-secret": {
        "body": "resource \"kubernetes_secret\" \"$1\" {\n    # metadata - (Required) Standard secret's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # data - (Optional) A map of the secret data.\n    data = \"\"\n\n    # type - (Optional) The secret type. Defaults to `Opaque`. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/c7151dd8dd7e487e96e5ce34c6a416bb3b037609/contributors/design-proposals/auth/secrets.md#proposed-design)\n    type = \"\"\n\n    # Exported Attributes\n}",
        "description": "The resource provides mechanisms to inject containers with sensitive information, such as passwords, while keeping containers agnostic of Kubernetes.\nSecrets can be used to store sensitive information either as individual properties or coarse-grained entries like entire files or JSON blobs.\nThe resource will by default create a secret which is available to any pod in the specified (or default) namespace. ~> Read more about security properties and risks involved with using Kubernetes secrets: [Kubernetes reference](https://kubernetes.io/docs/user-guide/secrets/#security-properties) ~> **Note:** All arguments including the secret data will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).",
        "prefix": "kubernetes-resource-secret"
    },
    "kubernetes-resource-service-account": {
        "body": "resource \"kubernetes_service_account\" \"$1\" {\n    # metadata - (Required) Standard service account's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # image_pull_secret - (Optional) A list of references to secrets in the same namespace to use for pulling any images in pods that reference this Service Account. For more info see [Kubernetes reference](http://kubernetes.io/docs/user-guide/secrets#manually-specifying-an-imagepullsecret)\n    image_pull_secret = \"\"\n\n    # secret - (Optional) A list of secrets allowed to be used by pods running using this Service Account. For more info see [Kubernetes reference](http://kubernetes.io/docs/user-guide/secrets)\n    secret = \"\"\n\n    # Exported Attributes\n    # \"default_secret_name\" - Name of the default secret the is created & managed by the service\n}",
        "description": "A service account provides an identity for processes that run in a Pod. Read more at [Kubernetes reference](https://kubernetes.io/docs/admin/service-accounts-admin)/",
        "prefix": "kubernetes-resource-service-account"
    },
    "kubernetes-resource-service-x": {
        "body": "resource \"kubernetes_service\" \"$1\" {\n    # spec - (Required) Spec defines the behavior of a service. [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # metadata - (Required) Standard service's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "A Service is an abstraction which defines a logical set of pods and a policy by which to access them - sometimes called a micro-service.",
        "prefix": "kubernetes-resource-service-x"
    },
    "kubernetes-resource-stateful-set-x": {
        "body": "resource \"kubernetes_stateful_set\" \"$1\" {\n    # spec - (Required) Spec defines the specification of the desired behavior of the stateful set. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#spec-and-status)\n    spec = \"\"\n\n    # metadata - (Required) Standard Kubernetes object metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # Exported Attributes\n}",
        "description": "Manages the deployment and scaling of a set of Pods , and provides guarantees about the \nordering and uniqueness of these Pods. Like a Deployment , a StatefulSet manages Pods that are based on an identical container spec.\nUnlike a Deployment, a StatefulSet maintains a sticky identity for each of their Pods.\nThese pods are created from the same spec, but are not interchangeable: each has a persistent \nidentifier that it maintains across any rescheduling. A StatefulSet operates under the same pattern as any other Controller.\nYou define your desired state in a StatefulSet object, and the StatefulSet controller makes any \nnecessary updates to get there from the current state.",
        "prefix": "kubernetes-resource-stateful-set-x"
    },
    "kubernetes-resource-storage-class": {
        "body": "resource \"kubernetes_storage_class\" \"$1\" {\n    # storage_provisioner - (Required) Indicates the type of the provisioner\n    storage_provisioner = \"\"\n\n    # metadata - (Required) Standard storage class's metadata. For more info see [Kubernetes reference](https://github.com/kubernetes/community/blob/e59e666e3464c7d4851136baa8835a311efdfb8e/contributors/devel/api-conventions.md#metadata)\n    metadata = \"\"\n\n    # parameters - (Optional) The parameters for the provisioner that should create volumes of this storage class.\n    parameters = \"\"\n\n    # reclaim_policy - (Optional) Indicates the reclaim policy to use.  If no reclaimPolicy is specified when a StorageClass object is created, it will default to Delete.\n    reclaim_policy = \"\"\n\n    # Exported Attributes\n}",
        "description": "Storage class is the foundation of dynamic provisioning, allowing cluster administrators to define abstractions for the underlying storage platform. Read more at http://blog.kubernetes.io/2017/03/dynamic-provisioning-and-storage-classes-kubernetes.html",
        "prefix": "kubernetes-resource-storage-class"
    }
}